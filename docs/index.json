{"repository_name":"moongoon","body":"<div align=\"center\">\n\t<img src=\"icon.svg\" width=\"128\" height=\"128\" />\n\t<h1>moongoon</h1>\n  <h3>A MongoDB ODM written in Crystal.</h3>\n  <a href=\"https://travis-ci.org/elbywan/moongoon\"><img alt=\"travis-badge\" src=\"https://travis-ci.org/elbywan/moongoon.svg?branch=master\"></a>\n  <a href=\"https://github.com/elbywan/moongoon/tags\"><img alt=\"GitHub tag (latest SemVer)\" src=\"https://img.shields.io/github/v/tag/elbywan/moongoon\"></a>\n  <a href=\"https://github.com/elbywan/moongoon/blob/master/LICENSE\"><img alt=\"GitHub\" src=\"https://img.shields.io/github/license/elbywan/moongoon\"></a>\n</div>\n\n<hr/>\n\n#### An object-document mapper (ODM) library written in Crystal which makes interacting with MongoDB a breeze.\n\nThis library relies on:\n- [`cryomongo`](https://github.com/elbywan/cryomongo) as the underlying MongoDB driver.\n- [`bson.cr`](https://github.com/elbywan/bson.cr) as the BSON implementation.\n\n*For the moongoon version relying on the [`mongo.cr`](https://github.com/elbywan/mongo.cr) driver, please check the [mongo.cr](https://github.com/elbywan/moongoon/tree/mongo.cr) branch.*\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  moongoon:\n    github: elbywan/moongoon\n```\n\n2. Run `shards install`\n\n3. Profit! ðŸ’°\n\n## Usage\n\n### Minimal working example\n\n```crystal\nrequire \"moongoon\"\n\n# A Model inherits from `Moongoon::Collection`\nclass User < Moongoon::Collection\n  collection \"users\"\n\n  index keys: { name: 1, age: 1 }, options: { unique: true }\n\n  property name : String\n  property age : Int32\n  property pets : Array(Pet)\n\n  # Nested models inherit from `Moongoon::Document`\n  class Pet < Moongoon::Document\n    property pet_name : String\n  end\nend\n\n# Connect to the mongodb instance.\nMoongoon.connect(\"mongodb://localhost:27017\", database_name: \"my_database\")\n\n# Initialize a model from argumentsâ€¦\nuser = User.new(name: \"Eric\", age: 10, pets: [\n  User::Pet.new(pet_name: \"Mr. Kitty\"),\n  User::Pet.new(pet_name: \"Fluffy\")\n])\n# â€¦or JSON dataâ€¦\nuser = User.from_json(%(\n  \"name\": \"Eric\",\n  \"age\": 10,\n  \"pets\": [\n    { \"pet_name\": \"Mr. Kitty\" },\n    { \"pet_name\": \"Fluffy\" }\n  ]\n))\n# â€¦or from querying the database.\nuser = User.find_one!({ name: \"Eric\" })\n\n# Insert a model in the database.\nuser.insert\n\n# Modify it.\nuser.name = \"Kyle\"\nuser.update\n\n# Delete it.\nuser.remove\n```\n\n### Connecting\n\n[**API documentation**](https://elbywan.github.io/moongoon/Moongoon/Database.html)\n\n- [Initial connection](https://elbywan.github.io/moongoon/Moongoon/Database.html#connect(database_url:String=\"mongodb://localhost:27017\",database_name:String=\"database\",*,reconnection_delay=5.seconds)-instance-method)\n- [Hooks](https://elbywan.github.io/moongoon/Moongoon/Database.html#after_connect(&block:Proc(Nil))-instance-method)\n- [Low-level](https://elbywan.github.io/moongoon/Moongoon.html#client:Mongo::Client-class-method)\n\n```crystal\nrequire \"moongoon\"\n\nMoongoon.before_connect {\n  puts \"Connectingâ€¦\"\n}\nMoongoon.after_connect {\n  puts \"Connected!\"\n}\n\n# â€¦ #\n\nMoongoon.connect(\n  database_url: \"mongodb://address:27017\",\n  database_name: \"my_database\"\n)\n\n# In case you need to perform a low level query, use `Moongoon.client` or `Moongoon.database`.\n# Here, *db* is a `cryomongo` Mongo::Database. (For more details, check the `cryomongo` documentation)\ndb = Moongoon.database\ncursor = db[\"my_collection\"].list_indexes\nputs cursor.to_a.to_json\n```\n\n### Models\n\n[**API documentation**](https://elbywan.github.io/moongoon/Moongoon/Collection.html)\n\n- [Indexes](https://elbywan.github.io/moongoon/Moongoon/Collection.html#index(collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil,**keys):Nil-class-method)\n- [Relationships](https://elbywan.github.io/moongoon/Moongoon/Collection.html#reference(field,*,model,many=false,delete_cascade=false,clear_reference=false,back_reference=nil)-macro)\n- [Aggregations](https://elbywan.github.io/moongoon/Moongoon/Collection.html#aggregation_pipeline(*args)-class-method)\n- [Versioning](https://elbywan.github.io/moongoon/Moongoon/Collection/Versioning.html#versioning(ref_field=nil,auto=false,&transform)-macro)\n\n```crystal\nrequire \"moongoon\"\n\nclass MyModel < Moongoon::Collection\n  collection \"models\"\n\n  # Note: the database can be changed - if different from the default one\n  # database \"database_name\"\n\n  # Define indexes\n  index keys: { name: 1 }\n\n  # Specify agregation pipeline stages that will automatically be used for queries.\n  aggregation_pipeline(\n    {\n      \"$addFields\": {\n        count: {\n          \"$size\": \"$array\"\n        }\n      }\n    },\n    {\n      \"$project\": {\n        array: 0\n      }\n    }\n  )\n\n  # Collection fields\n  property name : String\n  property count : Int32?\n  property array : Array(Int32)? = [1, 2, 3]\nend\n\n# â€¦assuming moongoon is connectedâ€¦ #\n\nMyModel.clear\n\nmodel = MyModel.new(\n  name: \"hello\"\n).insert\nmodel_id = model.id!\n\nputs MyModel.find_by_id(model_id).to_json\n# => \"{\\\"_id\\\":\\\"5ea052ce85ed2a2e1d0c87a2\\\",\\\"name\\\":\\\"hello\\\",\\\"count\\\":3}\"\n\nmodel.name = \"good night\"\nmodel.update\n\nputs MyModel.find_by_id(model_id).to_json\n# => \"{\\\"_id\\\":\\\"5ea052ce85ed2a2e1d0c87a2\\\",\\\"name\\\":\\\"good night\\\",\\\"count\\\":3}\"\n\nmodel.remove\nputs MyModel.count\n# => 0\n```\n\n### Running scripts\n\n[**API documentation**](https://elbywan.github.io/moongoon/Moongoon/Database/Scripts/Base.html)\n\n```crystal\n# A script must inherit from `Moongoon::Database::Scripts::Base`\n# Requiring the script before connecting to the database should be all it takes to register it.\n#\n# Scripts are then processed automatically.\nclass Moongoon::Database::Scripts::Test < Moongoon::Database::Scripts::Base\n  # Scripts run in ascending order.\n  # Default order if not specified is 1.\n  order Time.utc(2020, 3, 11).to_unix\n\n  def process(db : Mongo::Database)\n    # Dummy code that will add a ban flag for users that are called 'John'.\n    # This code uses the `cryomongo` syntax, but Models could\n    # be used for convenience despite a small performance overhead.\n    db[\"users\"].update_many(\n      filter: {name: \"John\"},\n      update: {\"$set\": {\"banned\": true}}\n    )\n  end\nend\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/elbywan/moongoon/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [elbywan](https://github.com/elbywan) - creator and maintainer\n\n## Credit\n\n- Icon made by [Smashicons](https://www.flaticon.com/authors/smashicons) from [www.flaticon.com](www.flaticon.com).","program":{"html_id":"moongoon/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"moongoon","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"moongoon/Moongoon","path":"Moongoon.html","kind":"module","full_name":"Moongoon","name":"Moongoon","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"moongoon/Moongoon/Database","kind":"module","full_name":"Moongoon::Database","name":"Database"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"Moongoon is a MongoDB object-document mapper library.","summary":"<p>Moongoon is a MongoDB object-document mapper library.</p>","class_methods":[{"id":"client:Mongo::Client-class-method","html_id":"client:Mongo::Client-class-method","name":"client","doc":"Retrieves the mongodb driver client that can be used to perform low level queries\n\nSee: [https://github.com/elbywan/cryomongo](https://github.com/elbywan/cryomongo)\n\n```\ncursor = Moongoon.client[\"database\"][\"collection\"].find({ \"key\": value })\nputs cursor.to_a\n```","summary":"<p>Retrieves the mongodb driver client that can be used to perform low level queries</p>","abstract":false,"args":[],"args_string":" : Mongo::Client","source_link":null,"def":{"name":"client","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Client","visibility":"Public","body":"if (value = @@client).nil?\n  ::raise(NilAssertionError.new(\"Moongoon.client cannot be nil\"))\nelse\n  value\nend"}},{"id":"client?:Mongo::Client?-class-method","html_id":"client?:Mongo::Client?-class-method","name":"client?","doc":"Retrieves the mongodb driver client that can be used to perform low level queries\n\nSee: [https://github.com/elbywan/cryomongo](https://github.com/elbywan/cryomongo)\n\n```\ncursor = Moongoon.client[\"database\"][\"collection\"].find({ \"key\": value })\nputs cursor.to_a\n```","summary":"<p>Retrieves the mongodb driver client that can be used to perform low level queries</p>","abstract":false,"args":[],"args_string":" : Mongo::Client?","source_link":null,"def":{"name":"client?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Client | ::Nil","visibility":"Public","body":"@@client"}},{"id":"database-class-method","html_id":"database-class-method","name":"database","doc":"The default database instance that can be used to perform low level queries.\n\nSee: [https://github.com/elbywan/cryomongo](https://github.com/elbywan/cryomongo)\n\n```\ndb = Moongoon.database\ncollection = db[\"some_collection\"]\ndata = collection.find query\npp data\n```","summary":"<p>The default database instance that can be used to perform low level queries.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"database","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@database).nil?\n  @@database = (client[database_name])\nelse\n  value\nend"}},{"id":"database_name:String-class-method","html_id":"database_name:String-class-method","name":"database_name","doc":"The name of the default database.","summary":"<p>The name of the default database.</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"database_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if (value = @@database_name).nil?\n  ::raise(NilAssertionError.new(\"Moongoon.database_name cannot be nil\"))\nelse\n  value\nend"}},{"id":"database_name?:String?-class-method","html_id":"database_name?:String?-class-method","name":"database_name?","doc":"The name of the default database.","summary":"<p>The name of the default database.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"database_name?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@@database_name"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"moongoon/Moongoon/Collection","path":"Moongoon/Collection.html","kind":"class","full_name":"Moongoon::Collection","name":"Collection","abstract":true,"superclass":{"html_id":"moongoon/Moongoon/MongoBase","kind":"class","full_name":"Moongoon::MongoBase","name":"MongoBase"},"ancestors":[{"html_id":"moongoon/Moongoon/Traits/Database/Internal","kind":"module","full_name":"Moongoon::Traits::Database::Internal","name":"Internal"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Delete","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Delete","name":"Delete"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Patch","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Patch","name":"Patch"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Post","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Post","name":"Post"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Get","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Get","name":"Get"},{"html_id":"moongoon/Moongoon/Traits/Database/Indexes","kind":"module","full_name":"Moongoon::Traits::Database::Indexes","name":"Indexes"},{"html_id":"moongoon/Moongoon/Traits/Database/Relationships","kind":"module","full_name":"Moongoon::Traits::Database::Relationships","name":"Relationships"},{"html_id":"moongoon/Moongoon/Traits/Database/Hooks","kind":"module","full_name":"Moongoon::Traits::Database::Hooks","name":"Hooks"},{"html_id":"moongoon/Moongoon/Traits/Database/Full","kind":"module","full_name":"Moongoon::Traits::Database::Full","name":"Full"},{"html_id":"moongoon/Moongoon/MongoBase","kind":"class","full_name":"Moongoon::MongoBase","name":"MongoBase"},{"html_id":"moongoon/Moongoon/Document","kind":"class","full_name":"Moongoon::Document","name":"Document"},{"html_id":"moongoon/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"moongoon/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"moongoon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"moongoon/Moongoon/Traits/Database/Full","kind":"module","full_name":"Moongoon::Traits::Database::Full","name":"Full"},{"html_id":"moongoon/Moongoon/Traits/Database/Hooks","kind":"module","full_name":"Moongoon::Traits::Database::Hooks","name":"Hooks"},{"html_id":"moongoon/Moongoon/Traits/Database/Indexes","kind":"module","full_name":"Moongoon::Traits::Database::Indexes","name":"Indexes"},{"html_id":"moongoon/Moongoon/Traits/Database/Internal","kind":"module","full_name":"Moongoon::Traits::Database::Internal","name":"Internal"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Delete","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Delete","name":"Delete"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Get","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Get","name":"Get"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Patch","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Patch","name":"Patch"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Post","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Post","name":"Post"},{"html_id":"moongoon/Moongoon/Traits/Database/Relationships","kind":"module","full_name":"Moongoon::Traits::Database::Relationships","name":"Relationships"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon","kind":"module","full_name":"Moongoon","name":"Moongoon"},"doc":"Base model class for interacting with a MongoDB collection.\n\nThis abstract class extends the `Moongoon::Base` class and enhances it with\nutility methods and macros used to query, update and configure an\nunderlying MongoDB collection.\n\n```\nclass MyModel < Moongoon::Collection\n  collection \"my_models\"\n\n  index keys: {name: 1}, options: {unique: true}\n\n  property name : String\n  property age : Int32\nend\n```","summary":"<p>Base model class for interacting with a MongoDB collection.</p>","class_methods":[{"id":"aggregation_pipeline(*args)-class-method","html_id":"aggregation_pipeline(*args)-class-method","name":"aggregation_pipeline","doc":"Defines an [aggregation pipeline](https://docs.mongodb.com/v3.6/reference/operator/aggregation-pipeline/) that will be used instead of a plain find query.\n\nIf this macro is used, the model will always use the [aggregate](https://docs.mongodb.com/v3.6/reference/command/aggregate/index.html)\nmethod to query documents and will use the stages passed as arguments to aggregate the results.\n\n```\naggregation_pipeline(\n  {\n    \"$addFields\": {\n      count: {\n        \"$size\": \"$array\"\n      }\n    }\n  },\n  {\n    \"$project\": {\n      array: 0\n    }\n  }\n)\n```","summary":"<p>Defines an <a href=\"https://docs.mongodb.com/v3.6/reference/operator/aggregation-pipeline/\" target=\"_blank\">aggregation pipeline</a> that will be used instead of a plain find query.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":null,"def":{"name":"aggregation_pipeline","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@aggregation_stages = [] of BSON\nargs.each do |arg|\n  @@aggregation_stages.try do |a|\n    a << (BSON.new(arg))\n  end\nend\n"}},{"id":"bulk_insert(self_array:Indexable(self),no_hooks=false,**args):Indexable(self)-class-method","html_id":"bulk_insert(self_array:Indexable(self),no_hooks=false,**args):Indexable(self)-class-method","name":"bulk_insert","doc":"Inserts multiple model instances in the database.\n\nThe `_id` field is generated during the insertion process.\n\n```\njohn = User.new name: \"John\", age: 25\njane = User.new name: \"Jane\", age: 22\nUser.bulk_insert [john, jane]\n```","summary":"<p>Inserts multiple model instances in the database.</p>","abstract":false,"args":[{"name":"self_array","doc":null,"default_value":"","external_name":"self_array","restriction":"Indexable(self)"},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(self_array : Indexable(<span class=\"k\">self</span>), no_hooks = <span class=\"n\">false</span>, **args) : Indexable(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"bulk_insert","args":[{"name":"self_array","doc":null,"default_value":"","external_name":"self_array","restriction":"Indexable(self)"},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Indexable(self)","visibility":"Public","body":"bulk = self.collection.bulk(**args)\nself_array.each do |model|\n  model._id=(BSON::ObjectId.new)\n  if no_hooks\n  else\n    self.before_insert_call(model)\n  end\n  bulk.insert_one(model.to_bson)\nend\nbulk.execute\nif no_hooks\nelse\n  self_array.each do |model|\n    self.after_insert_call(model)\n  end\nend\nself_array\n"}},{"id":"clear:Mongo::Commands::Common::DeleteResult?-class-method","html_id":"clear:Mongo::Commands::Common::DeleteResult?-class-method","name":"clear","doc":"Clears the collection.\n\nNOTE: **Use with caution!**\n\nWill remove all the documents in the collection.","summary":"<p>Clears the collection.</p>","abstract":false,"args":[],"args_string":" : Mongo::Commands::Common::DeleteResult?","source_link":null,"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::DeleteResult | ::Nil","visibility":"Public","body":"self.collection.delete_many(BSON.new)"}},{"id":"collection-class-method","html_id":"collection-class-method","name":"collection","doc":"Base model class for interacting with a MongoDB collection.\n\nThis abstract class extends the `Moongoon::Base` class and enhances it with\nutility methods and macros used to query, update and configure an\nunderlying MongoDB collection.\n\n```\nclass MyModel < Moongoon::Collection\n  collection \"my_models\"\n\n  index keys: {name: 1}, options: {unique: true}\n\n  property name : String\n  property age : Int32\nend\n```","summary":"<p>Base model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"collection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@collection).nil?\n  @@collection = (self.database[collection_name])\nelse\n  value\nend"}},{"id":"count(query=BSON.new,**args):Int32-class-method","html_id":"count(query=BSON.new,**args):Int32-class-method","name":"count","doc":"Counts the number of documents in the collection for a given query.\n\n```\ncount = User.count({ name: \"Julien\" })\n```","summary":"<p>Counts the number of documents in the collection for a given query.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Int32","source_link":null,"def":{"name":"count","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"self.collection.count_documents(query, **args)"}},{"id":"database-class-method","html_id":"database-class-method","name":"database","doc":"Base model class for interacting with a MongoDB collection.\n\nThis abstract class extends the `Moongoon::Base` class and enhances it with\nutility methods and macros used to query, update and configure an\nunderlying MongoDB collection.\n\n```\nclass MyModel < Moongoon::Collection\n  collection \"my_models\"\n\n  index keys: {name: 1}, options: {unique: true}\n\n  property name : String\n  property age : Int32\nend\n```","summary":"<p>Base model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"database","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@database).nil?\n  @@database = (if @@database_name == Moongoon.database_name\n    Moongoon.database\n  else\n    Moongoon.client[database_name]\n  end)\nelse\n  value\nend"}},{"id":"database_name-class-method","html_id":"database_name-class-method","name":"database_name","doc":"Base model class for interacting with a MongoDB collection.\n\nThis abstract class extends the `Moongoon::Base` class and enhances it with\nutility methods and macros used to query, update and configure an\nunderlying MongoDB collection.\n\n```\nclass MyModel < Moongoon::Collection\n  collection \"my_models\"\n\n  index keys: {name: 1}, options: {unique: true}\n\n  property name : String\n  property age : Int32\nend\n```","summary":"<p>Base model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"database_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@database_name).nil?\n  @@database_name = (Moongoon.database_name)\nelse\n  value\nend"}},{"id":"default_fields(fields)-class-method","html_id":"default_fields(fields)-class-method","name":"default_fields","doc":"Set the `fields` value to use by default when calling `find` methods.\n\n```\ndefault_fields({ ignored_field: 0 })\n```","summary":"<p>Set the <code>fields</code> value to use by default when calling <code><a href=\"../Moongoon/Collection.html#find(query=BSON.new,order_by=%7B_id:-1%7D,fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method\">.find</a></code> methods.</p>","abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""}],"args_string":"(fields)","source_link":null,"def":{"name":"default_fields","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@default_fields = BSON.new(fields)"}},{"id":"exist!(query=BSON.new,**args):Bool-class-method","html_id":"exist!(query=BSON.new,**args):Bool-class-method","name":"exist!","doc":"Ensures that at least one document matches the query.\nWill raise when there is no match.\n\n```\nbegin\n  User.exist!({ name: \"Julien\" })\nrescue e : Moongoon::Error::NotFound\n  # No user named Julien found\nend\n```","summary":"<p>Ensures that at least one document matches the query.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Bool","source_link":null,"def":{"name":"exist!","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"count = self.count(query, **args)\nif count > 0\nelse\n  query_json = (BSON.new(query)).to_json\n  ::Moongoon::Log.info do\n    \"[mongo][exists!](#{self.collection_name}) No matches for query:\\n#{query_json}\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\ncount > 0\n"}},{"id":"exist_by_id!(id,query=BSON.new,**args):Bool-class-method","html_id":"exist_by_id!(id,query=BSON.new,**args):Bool-class-method","name":"exist_by_id!","doc":"Same as `self.exist!` but for a single document given its id.\n\n```\nbegin\n  User.exist_by_id!(\"123456\")\nrescue e : Moongoon::Error::NotFound\n  # No user having _id \"123456\" found\nend\n```","summary":"<p>Same as <code>self<a href=\"../Moongoon/Collection.html#exist!(query=BSON.new,**args):Bool-class-method\">.exist!</a></code> but for a single document given its id.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Bool","source_link":null,"def":{"name":"exist_by_id!","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nself.exist!(query, **args)\n"}},{"id":"find(query=BSON.new,order_by={_id:-1},fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method","html_id":"find(query=BSON.new,order_by={_id:-1},fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method","name":"find","doc":"Finds one or multiple documents and returns an array of `Moongoon::Collection` instances.\n\nNOTE: Documents are sorted by creation date in descending order.\n\n```\n# Search for persons named Julien\nusers = User.find({ name: \"Julien\" })\n```\n\nIt is possible to use optional arguments to order, paginate and control queries.\n\n```\n# Order the results by birth_date\nusers = User.find({ name: \"Julien\" }, order_by: { birth: 1 })\n\n# Paginate the results.\nusers = User.find({ name: \"Julien\" }, skip: 50, limit: 20)\n\n# Fetch only specific fields.\n# Be extra careful to always fetch mandatory fields.\nusers = User.find({ name: \"Julien\" }, fields: { age: 1, name: 1 })\n```\n\nNOTE: Other arguments are available but will not be documented here.\nFor more details check out the underlying [`cryomongo`](https://github.com/elbywan/cryomongo) driver documentation and code.","summary":"<p>Finds one or multiple documents and returns an array of <code><a href=\"../Moongoon/Collection.html\">Moongoon::Collection</a></code> instances.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, fields = @@default_fields, skip = <span class=\"n\">0</span>, limit = <span class=\"n\">0</span>, **args) : Array(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"find","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"items = [] of self\nif stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by, skip, limit)\n  (self.collection.aggregate(pipeline, **args)).try do |c|\n    items = c.map do |elt|\n      self.from_bson(elt)\n    end.to_a\n  end\nelse\n  cursor = self.collection.find(query, **args, sort: order_by, projection: fields, skip: skip, limit: limit)\n  items = cursor.map do |elt|\n    self.from_bson(elt)\n  end.to_a\nend\nitems\n"}},{"id":"find!(query,**args):Array(self)-class-method","html_id":"find!(query,**args):Array(self)-class-method","name":"find!","doc":"NOTE: Similar to `self.find`, but raises when no documents are found.\n\n```\nbegin\n  users = User.find!({ name: \"Julien\" })\nrescue\n raise \"No one is named Julien.\"\nend\n```","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../Moongoon/Collection.html#find(query=BSON.new,order_by=%7B_id:-1%7D,fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method\">.find</a></code>, but raises when no documents are found.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"args_string":"(query, **args) : Array(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"find!","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"items = self.find(query, **args)\nif items.size > 0\nelse\n  query_json = (BSON.new(query)).to_json\n  ::Moongoon::Log.info do\n    \"[mongo][find!](#{self.collection_name}) No matches for query:\\n#{query_json}\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitems\n"}},{"id":"find_and_modify(query,update,fields=@@default_fields,no_hooks=false,**args)-class-method","html_id":"find_and_modify(query,update,fields=@@default_fields,no_hooks=false,**args)-class-method","name":"find_and_modify","doc":"Modifies and returns a single document.\n\nSee the [official documentation](https://docs.mongodb.com/v3.6/reference/command/findAndModify/).\n\n```\nUser.find_and_modify({ name: \"John\" }, { \"$set\": { \"name\": \"Igor\" }})\n```","summary":"<p>Modifies and returns a single document.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, update, fields = @@default_fields, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_modify","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query, update = BSON.new(query), BSON.new(update)\nif no_hooks\nelse\n  new_update = self.before_update_static_call(query, update)\n  if new_update\n    update = new_update\n  end\nend\nitem = self.collection.find_one_and_update(query, update, **args, fields: fields)\nif no_hooks\nelse\n  self.after_update_static_call(query, update)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_and_modify_by_id(id,update,query=BSON.new,no_hooks=false,**args)-class-method","html_id":"find_and_modify_by_id(id,update,query=BSON.new,no_hooks=false,**args)-class-method","name":"find_and_modify_by_id","doc":"Modifies and returns a single document.\n\nSimilar to `self.find_and_modify`, except that a matching on the `_id` field will be added to the *query* argument.","summary":"<p>Modifies and returns a single document.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(id, update, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_modify_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nfind_and_modify(query, update, **args)\n"}},{"id":"find_and_remove(query,fields=@@default_fields,no_hooks=false,**args)-class-method","html_id":"find_and_remove(query,fields=@@default_fields,no_hooks=false,**args)-class-method","name":"find_and_remove","doc":"Removes and returns a single document.\n\nSee the [official documentation](https://docs.mongodb.com/v3.6/reference/command/findAndModify/).\n\n```\nUser.find_and_remove({ name: \"John\" })\n```","summary":"<p>Removes and returns a single document.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, fields = @@default_fields, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_remove","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query = BSON.new(query)\nif no_hooks\nelse\n  new_update = self.before_remove_static_call(query)\n  if new_update\n    update = new_update\n  end\nend\nitem = self.collection.find_one_and_delete(query, **args, fields: fields)\nif no_hooks\nelse\n  self.after_remove_static_call(query)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_and_remove_by_id(id,query=BSON.new,no_hooks=false,**args)-class-method","html_id":"find_and_remove_by_id(id,query=BSON.new,no_hooks=false,**args)-class-method","name":"find_and_remove_by_id","doc":"Removes and returns a single document.\n\nSimilar to `self.find_and_remove`, except that a matching on the `_id` field will be added to the *query* argument.","summary":"<p>Removes and returns a single document.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_remove_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nfind_and_remove(query, update, **args)\n"}},{"id":"find_by_ids(ids,query=BSON.new,order_by={_id:-1},**args):Array(self)?-class-method","html_id":"find_by_ids(ids,query=BSON.new,order_by={_id:-1},**args):Array(self)?-class-method","name":"find_by_ids","doc":"Finds one or multiple documents by their ids and returns an array of `Moongoon::Collection` instances.\n\nSyntax is similar to `self.find`.\n\n```\nids = [\"1\", \"2\", \"3\"]\nusers = User.find_by_ids(ids)\n```","summary":"<p>Finds one or multiple documents by their ids and returns an array of <code><a href=\"../Moongoon/Collection.html\">Moongoon::Collection</a></code> instances.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"args_string":"(ids, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, **args) : Array(<span class=\"k\">self</span>)?","source_link":null,"def":{"name":"find_by_ids","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self) | ::Nil","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_ids_filter(query, ids)\nself.find(query, order_by, **args)\n"}},{"id":"find_by_ids!(ids,**args):Array(self)?-class-method","html_id":"find_by_ids!(ids,**args):Array(self)?-class-method","name":"find_by_ids!","doc":"NOTE: Similar to `self.find_by_ids`, but raises when no documents are found.","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../Moongoon/Collection.html#find_by_ids(ids,query=BSON.new,order_by=%7B_id:-1%7D,**args):Array(self)?-class-method\">.find_by_ids</a></code>, but raises when no documents are found.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""}],"args_string":"(ids, **args) : Array(<span class=\"k\">self</span>)?","source_link":null,"def":{"name":"find_by_ids!","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self) | ::Nil","visibility":"Public","body":"items = self.find_by_ids(ids, **args)\nif items.size > 0\nelse\n  ::Moongoon::Log.info do\n    \"[mongo][exists!](#{self.collection_name}) No matches for ids #{ids.to_json}.\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitems\n"}},{"id":"find_ids(query=BSON.new,order_by={_id:-1},**args):Array(String)-class-method","html_id":"find_ids(query=BSON.new,order_by={_id:-1},**args):Array(String)-class-method","name":"find_ids","doc":"Finds ids for documents matching the *query* argument and returns them an array of strings.\n\nSyntax is similar to `self.find`.\n\n```\njane_ids = User.find_ids({ name: \"Jane\" })\n```","summary":"<p>Finds ids for documents matching the <em>query</em> argument and returns them an array of strings.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, **args) : Array(String)","source_link":null,"def":{"name":"find_ids","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"ids = [] of String\ncursor = self.collection.find(query, **args, sort: order_by, projection: {_id: 1})\nwhile item = cursor.first?\n  ids << item[\"_id\"].to_s\nend\nids\n"}},{"id":"index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method","html_id":"index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method","name":"index","doc":"Defines an index that will be applied to this Model's underlying mongo collection.\n\n**Note that the order of fields do matter.**\n\nIf not provided the driver will generate the name of the index from the keys names and order.\n\nPlease have a look at the [MongoDB documentation](https://docs.mongodb.com/manual/reference/command/createIndexes/)\nfor more details about index creation and the list of available index options.\n\n```\n# Specify one or more fields with a type (ascending or descending order, text indexingâ€¦)\nindex keys: { field1: 1, field2: -1 }\n# Set the unique argument to create a unique index.\nindex keys: { field: 1 }, options: { unique: true }\n```","summary":"<p>Defines an index that will be applied to this Model's underlying mongo collection.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"NamedTuple"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(keys : NamedTuple, collection : String? = <span class=\"n\">nil</span>, database : String? = <span class=\"n\">nil</span>, options = <span class=\"t\">NamedTuple</span>.<span class=\"k\">new</span>, name : String? = <span class=\"n\">nil</span>) : Nil","source_link":null,"def":{"name":"index","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"NamedTuple"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"index = BSON.new({keys: keys, options: !name ? options : options.merge({name: name})})\ncb = -> do\n  {(database || self.database_name).not_nil!, (collection || self.collection_name).not_nil!}\nend\n::Moongoon::Traits::Database::Indexes.add_index(index, cb)\n"}},{"id":"index(keys:Hash(String,BSON::Value),collection:String?=nil,database:String?=nil,options=Hash(String,BSON::Value).new,name:String?=nil):Nil-class-method","html_id":"index(keys:Hash(String,BSON::Value),collection:String?=nil,database:String?=nil,options=Hash(String,BSON::Value).new,name:String?=nil):Nil-class-method","name":"index","doc":"Same as `self.index` but with hash arguments.\n\n```\nindex ({ \"a\" => 1 }), name: \"index_name\", options: { \"unique\" => true }\n```","summary":"<p>Same as <code>self<a href=\"../Moongoon/Collection.html#index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method\">.index</a></code> but with hash arguments.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Hash(String, BSON::Value)"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"Hash(String, BSON::Value).new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(keys : Hash(String, BSON::Value), collection : String? = <span class=\"n\">nil</span>, database : String? = <span class=\"n\">nil</span>, options = <span class=\"t\">Hash</span>(<span class=\"t\">String</span>, <span class=\"t\">BSON</span><span class=\"t\">::</span><span class=\"t\">Value</span>).<span class=\"k\">new</span>, name : String? = <span class=\"n\">nil</span>) : Nil","source_link":null,"def":{"name":"index","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Hash(String, BSON::Value)"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"Hash(String, BSON::Value).new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"index = BSON.new({\"keys\" => keys, \"options\" => !name ? options : options.merge({\"name\" => name})})\ncb = -> do\n  {(database || self.database_name).not_nil!, (collection || self.collection_name).not_nil!}\nend\n::Moongoon::Traits::Database::Indexes.add_index(index, cb)\n"}},{"id":"remove(query=BSON.new,no_hooks=false,**args):Mongo::Commands::Common::DeleteResult?-class-method","html_id":"remove(query=BSON.new,no_hooks=false,**args):Mongo::Commands::Common::DeleteResult?-class-method","name":"remove","doc":"Removes one or more documents from the collection.\n\n```\nUser.remove({ name: { \"$in\": [\"John\", \"Jane\"] }})\n```","summary":"<p>Removes one or more documents from the collection.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, no_hooks = <span class=\"n\">false</span>, **args) : Mongo::Commands::Common::DeleteResult?","source_link":null,"def":{"name":"remove","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::DeleteResult | ::Nil","visibility":"Public","body":"if no_hooks\nelse\n  self.before_remove_static_call(BSON.new(query))\nend\nresult = self.collection.delete_many(query, **args)\nif no_hooks\nelse\n  self.after_remove_static_call(BSON.new(query))\nend\nresult\n"}},{"id":"remove_by_id(id,query=BSON.new,**args):Mongo::Commands::Common::DeleteResult?-class-method","html_id":"remove_by_id(id,query=BSON.new,**args):Mongo::Commands::Common::DeleteResult?-class-method","name":"remove_by_id","doc":"Removes one document by id.\n\n```\nid = 123456\nUser.remove_by_id id\n```\n\nIt is possible to add query filters to conditionally prevent removal.\n\n```\n# Remove the user only if he/she is named John\nUser.remove id, query: { name: \"John\" }\n```","summary":"<p>Removes one document by id.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Mongo::Commands::Common::DeleteResult?","source_link":null,"def":{"name":"remove_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::DeleteResult | ::Nil","visibility":"Public","body":"full_query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nremove(full_query)\n"}},{"id":"remove_by_ids(ids,query=BSON.new,**args):Mongo::Commands::Common::DeleteResult?-class-method","html_id":"remove_by_ids(ids,query=BSON.new,**args):Mongo::Commands::Common::DeleteResult?-class-method","name":"remove_by_ids","doc":"Removes one or more documents from the collection by their ids.\n```\nids = [\"1\", \"2\", \"3\"]\nUser.remove_by_ids ids\n```\n\nIt is possible to add query filters to conditionally prevent removal.\n\n```\n# Remove the users only if they are named John\nUser.remove_by_ids ids , query: { name: \"John\" }\n```","summary":"<p>Removes one or more documents from the collection by their ids.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(ids, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Mongo::Commands::Common::DeleteResult?","source_link":null,"def":{"name":"remove_by_ids","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::DeleteResult | ::Nil","visibility":"Public","body":"full_query = ::Moongoon::Traits::Database::Internal.concat_ids_filter(query, ids)\nremove(full_query)\n"}},{"id":"update(query,update,no_hooks=false,**args):Mongo::Commands::Common::UpdateResult?-class-method","html_id":"update(query,update,no_hooks=false,**args):Mongo::Commands::Common::UpdateResult?-class-method","name":"update","doc":"Updates one or more documents in the underlying collection.\n\nEvery document matching the *query* argument will be updated.\nSee the [MongoDB tutorial](https://docs.mongodb.com/v3.6/tutorial/update-documents/)\nfor more information about the syntax.\n\n```\n# Rename every person named \"John\" to \"Igor\".\nUser.update(query: { name: \"John\" }, update: { \"$set\": { name: \"Igor\" } })\n```","summary":"<p>Updates one or more documents in the underlying collection.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, update, no_hooks = <span class=\"n\">false</span>, **args) : Mongo::Commands::Common::UpdateResult?","source_link":null,"def":{"name":"update","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"query, update = BSON.new(query), BSON.new(update)\nif no_hooks\nelse\n  new_update = self.before_update_static_call(query, update)\n  if new_update\n    update = new_update\n  end\nend\nresult = self.collection.update_many(query, update, **args)\nif no_hooks\nelse\n  self.after_update_static_call(query, update)\nend\nresult\n"}},{"id":"update_by_id(id,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","html_id":"update_by_id(id,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","name":"update_by_id","doc":"Updates one document by id.\n\nSimilar to `self.update`, except that a matching on the `_id` field will be added to the *query* argument.\n\n```\nid = 123456\nUser.update_by_id(id, { \"$set\": { \"name\": \"Igor\" }})\n```\n\nIt is possible to add query filters to conditionally prevent an update.\n\n```\n# Updates the user only if he/she is named John.\nUser.update_by_id(id, query: { name: \"John\" }, update: { \"$set\": { name: \"Igor\" }})\n```","summary":"<p>Updates one document by id.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(id, update, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Mongo::Commands::Common::UpdateResult?","source_link":null,"def":{"name":"update_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nupdate(query, update, **args)\n"}},{"id":"update_by_ids(ids,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","html_id":"update_by_ids(ids,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","name":"update_by_ids","doc":"Updates one or multiple documents by their ids.\n\nSimilar to `self.update`, except that a matching on multiple `_id`\nfields will be added to the *query* argument.\n\n```\nids = [\"1\", \"2\", \"3\"]\nUser.update_by_ids(ids, { \"$set\": { \"name\": \"Igor\" }})\n```\n\nIt is possible to add query filters.\n\n```\n# Updates the users only if they are named John.\nUser.update_by_ids(ids, query: { name: \"John\" }, update: { \"$set\": { name: \"Igor\" }})\n```","summary":"<p>Updates one or multiple documents by their ids.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(ids, update, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Mongo::Commands::Common::UpdateResult?","source_link":null,"def":{"name":"update_by_ids","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_ids_filter(query, ids)\nupdate(query, update, **args)\n"}}],"constructors":[{"id":"find_by_id(id:String,query=BSON.new,order_by={_id:-1},fields=@@default_fields,**args):self?-class-method","html_id":"find_by_id(id:String,query=BSON.new,order_by={_id:-1},fields=@@default_fields,**args):self?-class-method","name":"find_by_id","doc":"Finds a single document by id and returns a `Moongoon::Collection` instance.\n\nSyntax is similar to `self.find_one`.\n\n```\nuser = User.find_by_id(123456)\n```","summary":"<p>Finds a single document by id and returns a <code><a href=\"../Moongoon/Collection.html\">Moongoon::Collection</a></code> instance.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""}],"args_string":"(id : String, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, fields = @@default_fields, **args) : <span class=\"k\">self</span>?","source_link":null,"def":{"name":"find_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"item = uninitialized BSON | ::Nil\nquery = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nitem = if stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by)\n  cursor = self.collection.aggregate(pipeline, **args)\n  cursor.try(&.first?)\nelse\n  self.collection.find_one(query, **args, sort: order_by, projection: fields, skip: 0)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_by_id!(id,**args):self-class-method","html_id":"find_by_id!(id,**args):self-class-method","name":"find_by_id!","doc":"NOTE: Similar to `self.find_by_id`, but raises when the document was not found.","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../Moongoon/Collection.html#find_by_id(id:String,query=BSON.new,order_by=%7B_id:-1%7D,fields=@@default_fields,**args):self?-class-method\">.find_by_id</a></code>, but raises when the document was not found.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(id, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"find_by_id!","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"item = self.find_by_id(id, **args)\nif item\nelse\n  ::Moongoon::Log.info do\n    \"[mongo][find_by_id!](#{self.collection_name}) Failed to fetch resource with id #{id}.\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitem.not_nil!\n"}},{"id":"find_one(query=BSON.new,fields=@@default_fields,order_by={_id:-1},skip=0,**args):self?-class-method","html_id":"find_one(query=BSON.new,fields=@@default_fields,order_by={_id:-1},skip=0,**args):self?-class-method","name":"find_one","doc":"Finds a single document and returns a `Moongoon::Collection` instance.\n\n```\n# Retrieve a single user named Julien\nuser = User.find_one({ name: \"Julien\" })\n```\n\nThe following optional arguments are available.\n\n```\n# Fetch only specific fields.\n# Be extra careful to always fetch mandatory fields.\nuser = User.find_one({ name: \"Julien\" }, fields: { age: 1, name: 1 })\n\n# Skip some results. Will return the 3rd user called Julien.\nuser = User.find_one({ name: \"Julien\"}, skip: 2)\n```\n\nNOTE: Other arguments are available but will not be documented here.\nFor more details check out the underlying [`cryomongo`](https://github.com/elbywan/cryomongo) driver documentation and code.","summary":"<p>Finds a single document and returns a <code><a href=\"../Moongoon/Collection.html\">Moongoon::Collection</a></code> instance.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, fields = @@default_fields, order_by = {_id: <span class=\"n\">-1</span>}, skip = <span class=\"n\">0</span>, **args) : <span class=\"k\">self</span>?","source_link":null,"def":{"name":"find_one","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"item = if stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by, skip)\n  cursor = self.collection.aggregate(pipeline, **args)\n  cursor.try(&.first?)\nelse\n  self.collection.find_one(query, **args, sort: order_by, projection: fields, skip: skip)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_one!(query,**args):self-class-method","html_id":"find_one!(query,**args):self-class-method","name":"find_one!","doc":"NOTE: Similar to `self.find_one`, but raises when the document was not found.","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../Moongoon/Collection.html#find_one(query=BSON.new,fields=@@default_fields,order_by=%7B_id:-1%7D,skip=0,**args):self?-class-method\">.find_one</a></code>, but raises when the document was not found.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"args_string":"(query, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"find_one!","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"item = self.find_one(query, **args)\nif item\nelse\n  query_json = (BSON.new(query)).to_json\n  ::Moongoon::Log.info do\n    \"[mongo][find_one!](#{self.collection_name}) No matches for query:\\n#{query_json}\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitem\n"}},{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"Base model class for interacting with a MongoDB collection.\n\nThis abstract class extends the `Moongoon::Base` class and enhances it with\nutility methods and macros used to query, update and configure an\nunderlying MongoDB collection.\n\n```\nclass MyModel < Moongoon::Collection\n  collection \"my_models\"\n\n  index keys: {name: 1}, options: {unique: true}\n\n  property name : String\n  property age : Int32\nend\n```","summary":"<p>Base model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":null,"def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"_id:BSON::ObjectId?-instance-method","html_id":"_id:BSON::ObjectId?-instance-method","name":"_id","doc":"The MongoDB internal id representation.","summary":"<p>The MongoDB internal id representation.</p>","abstract":false,"args":[],"args_string":" : BSON::ObjectId?","source_link":null,"def":{"name":"_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::ObjectId | ::Nil","visibility":"Public","body":"@_id"}},{"id":"_id=(_id:BSON::ObjectId?)-instance-method","html_id":"_id=(_id:BSON::ObjectId?)-instance-method","name":"_id=","doc":"The MongoDB internal id representation.","summary":"<p>The MongoDB internal id representation.</p>","abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::ObjectId | ::Nil"}],"args_string":"(_id : BSON::ObjectId?)","source_link":null,"def":{"name":"_id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::ObjectId | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@_id = _id"}},{"id":"fetch-instance-method","html_id":"fetch-instance-method","name":"fetch","doc":"Returns a fresh copy of this object that is fetched from the database.\n\n```\nuser = User.new(name: \"John\", age: 10)\nUser.update({ name: \"John\", age: 11 })\nputs user.age\n# => 10\nputs user.fetch.age\n# => 11\n```","summary":"<p>Returns a fresh copy of this object that is fetched from the database.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"fetch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"id_check!\nfresh_model = self.class.find_by_id!(id!)\n"}},{"id":"id-instance-method","html_id":"id-instance-method","name":"id","doc":"Converts the MongoDB bson _id to a String representation.","summary":"<p>Converts the MongoDB bson _id to a String representation.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self._id\n  self._id.to_s\nend"}},{"id":"id!-instance-method","html_id":"id!-instance-method","name":"id!","doc":"Converts the MongoDB bson _id to a String representation.\n\nWill raise if _id is nil.","summary":"<p>Converts the MongoDB bson _id to a String representation.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"id!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.id.not_nil!"}},{"id":"id=(id:String)-instance-method","html_id":"id=(id:String)-instance-method","name":"id=","doc":"Set a MongoDB bson _id from a String.","summary":"<p>Set a MongoDB bson _id from a String.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"args_string":"(id : String)","source_link":null,"def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self._id=(BSON::ObjectId.new(id))"}},{"id":"insert(no_hooks=false,**args):self-instance-method","html_id":"insert(no_hooks=false,**args):self-instance-method","name":"insert","doc":"Inserts this model instance in the database.\n\nThe `_id` field is generated during the insertion process.\n\n```\nuser = User.new name: \"John\", age: 25\nuser.insert\n```","summary":"<p>Inserts this model instance in the database.</p>","abstract":false,"args":[{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(no_hooks = <span class=\"n\">false</span>, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"insert","args":[{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self._id=(BSON::ObjectId.new)\nif no_hooks\nelse\n  self.class.before_insert_call(self)\nend\nself.class.collection.insert_one(self.to_bson, **args)\nif no_hooks\nelse\n  self.class.after_insert_call(self)\nend\nself\n"}},{"id":"remove(query=BSON.new,no_hooks=false,**args):Mongo::Commands::Common::DeleteResult?-instance-method","html_id":"remove(query=BSON.new,no_hooks=false,**args):Mongo::Commands::Common::DeleteResult?-instance-method","name":"remove","doc":"Removes one document having the same id as this model.\n\nMatches on `self.id`.\n\n```\nuser = User.find_by_id 123456\nuser.remove\n```\n\nIt is possible to add query filters to conditionally prevent removal.\n\n```\n# Remove the user only if he/she is named John\nuser.remove({ name: \"John\" })\n```","summary":"<p>Removes one document having the same id as this model.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, no_hooks = <span class=\"n\">false</span>, **args) : Mongo::Commands::Common::DeleteResult?","source_link":null,"def":{"name":"remove","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::DeleteResult | ::Nil","visibility":"Public","body":"id_check!\nfull_query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id!)\nif no_hooks\nelse\n  self.class.before_remove_call(self)\nend\nresult = self.class.collection.delete_one(full_query, **args)\nif no_hooks\nelse\n  self.class.after_remove_call(self)\nend\nresult\n"}},{"id":"update(query=BSON.new,**args):self-instance-method","html_id":"update(query=BSON.new,**args):self-instance-method","name":"update","doc":"Updates a document having the same id as this model with the data stored in `self`.\n\nTries to match on `self.id`.\n\n```\nuser = User.new name: \"John\", age: 25\nuser.insert\nuser.age = 26\nuser.update\n```\n\nIt is possible to add query filters to conditionally prevent an update.\n\n```\nuser = User.new name: \"John\", locked: true\nuser.insert\nuser.name = \"Igor\"\n# Prevents updating users that are locked.\nuser.update({ locked: false })\npp User.find_by_id(user.id!).to_json\n# => { \"id\": \"some id\", \"name\": \"John\", \"locked\": true }\n```","summary":"<p>Updates a document having the same id as this model with the data stored in <code>self</code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"update","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"id_check!\nquery = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nself.update_query(query, **args)\n"}},{"id":"update_query(query,no_hooks=false,**args):self-instance-method","html_id":"update_query(query,no_hooks=false,**args):self-instance-method","name":"update_query","doc":"Updates one or more documents with the data stored in `self`.\n\nEvery document matching the *query* argument will be updated.\n\n```\nuser = User.new name: \"John\", age: 25\nuser = User.new name: \"Jane\", age: 30\nuser.insert\nuser.age = 40\n# Updates both documents\nuser.update_query({ name: {\"$in\": [\"John\", \"Jane\"]} })\n```","summary":"<p>Updates one or more documents with the data stored in <code>self</code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, no_hooks = <span class=\"n\">false</span>, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"update_query","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if no_hooks\nelse\n  self.class.before_update_call(self)\nend\nself.class.collection.update_many(query, **args, update: {\"$set\": self.to_bson})\nif no_hooks\nelse\n  self.class.after_update_call(self)\nend\nself\n"}}],"macros":[{"id":"reference(field,*,model,many=false,delete_cascade=false,clear_reference=false,back_reference=nil)-macro","html_id":"reference(field,*,model,many=false,delete_cascade=false,clear_reference=false,back_reference=nil)-macro","name":"reference","doc":"References one or more documents belonging to another collection.\n\nCreates a model field that will reference either one or multiple\nforeign documents depending on the arguments provided.\n\nNOTE: This macro is useful when using named arguments to keep the reference\nin sync when documents are added or removed from the other collection.\n\n```\nclass MyModel < Moongoon::Collection\n  # The following references are not kept in sync because extra named arguments are not used.\n\n  # Reference a single user.\n  reference user_id, model: User\n\n  # References multiple users.\n  reference user_ids, model: User, many: true\n\n  reference user_ids, model: User, many: true\nend\n```\n\n**Named arguments**\n\n- *model*: The referenced model class.\n- *many*: Set to true to reference multiple documents.\n- *delete_cascade*: If true, removes the referenced document(s) when this model is removed.\n- *clear_reference*: If true, sets the reference to nil (if referencing a single document), or removes the id from the\nreference array (if referencing multiple documents) when the referenced document(s) are removed.\n- *back_reference*: The name of the refence, if it exists, in the referenced model that back-references this model.\nIf set, when a referenced document gets inserted, this reference will be updated to add the newly created id.\n\n```\nclass MyModel < Moongoon::Collection\n  # Now some examples that are using extra arguments.\n\n  # References a single user from the User model class.\n  # The user has a field that links to back to this model (best_friend_id).\n  # Whenever a user is inserted, the reference will get updated to point to the linked user.\n  reference user_id, model: User, back_reference: best_friend_id\n\n  # References multiple pets. When this model is removed, all the pets\n  # referenced will be removed as well.\n  reference pet_ids, model: Pet, many: true, delete_cascade: true\n\n  # Whenever a Pet is removed the reference will get updated and the\n  # id of the Pet will be removed from the array.\n  reference pet_id, model: Pet, many: true, clear_reference: true\nend\n```","summary":"<p>References one or more documents belonging to another collection.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"many","doc":null,"default_value":"false","external_name":"many","restriction":""},{"name":"delete_cascade","doc":null,"default_value":"false","external_name":"delete_cascade","restriction":""},{"name":"clear_reference","doc":null,"default_value":"false","external_name":"clear_reference","restriction":""},{"name":"back_reference","doc":null,"default_value":"nil","external_name":"back_reference","restriction":""}],"args_string":"(field, *, model, many = <span class=\"n\">false</span>, delete_cascade = <span class=\"n\">false</span>, clear_reference = <span class=\"n\">false</span>, back_reference = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"reference","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"many","doc":null,"default_value":"false","external_name":"many","restriction":""},{"name":"delete_cascade","doc":null,"default_value":"false","external_name":"delete_cascade","restriction":""},{"name":"clear_reference","doc":null,"default_value":"false","external_name":"clear_reference","restriction":""},{"name":"back_reference","doc":null,"default_value":"nil","external_name":"back_reference","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"      \n{% field_key = field.id %}\n\n      \n{% model_class = model %}\n\n\n      \n{% if many %}\n        # References multiple documents\n        property {{ field_key }} : Array(String) = [] of String\n\n        {% if delete_cascade %}\n          # Cascades on deletion\n\n          self.before_remove { |model|\n            model = model.fetch\n            ids_to_remove = model.try &.{{ field_key }}\n            if ids_to_remove.try(&.size) || 0 > 0\n              {{ model_class }}.remove_by_ids ids_to_remove.not_nil!\n            end\n          }\n\n          self.before_remove_static { |query|\n            models = find query\n            ids_to_remove = [] of String\n            models.each { |model|\n              model.{{ field_key }}.try &.each { |id|\n                ids_to_remove << id\n              }\n            }\n            if ids_to_remove.size > 0\n              {{ model_class }}.remove_by_ids ids_to_remove\n            end\n          }\n        {% end %}\n\n      {% else %}\n        # References a single item\n        property {{ field_key }} : String?\n\n        {% if delete_cascade %}\n          # Cascades on deletion\n\n          self.before_remove { |model|\n            model = model.fetch\n            link = model.try &.{{ field_key }}\n            if link\n              {{ model_class }}.remove_by_id link\n            end\n          }\n\n          self.before_remove_static { |query|\n            models = find query\n            ids_to_remove = [] of String\n            models.each { |model|\n              if id_to_remove = model.{{ field_key }}\n                ids_to_remove <<  id_to_remove\n              end\n            }\n            if ids_to_remove.size > 0\n              {{ model_class }}.remove_by_ids ids_to_remove\n            end\n          }\n        {% end %}\n\n      {% end %}\n\n\n      \n{% if clear_reference %}\n        # Updates the reference when the target gets deleted.\n        {% if many %}\n          {% mongo_op = \"$pull\" %}\n        {% else %}\n          {% mongo_op = \"$unset\" %}\n        {% end %}\n\n        {{ model_class }}.after_remove { |removed_model|\n          items = self.find({\n            {{ field_key }}: removed_model.id\n          })\n          if items.size > 0\n            ids = items.map &.id!\n            self.update_by_ids(ids, {\n              {{ mongo_op }}: {\n                {{ field_key }}: removed_model.id\n              }\n            })\n          end\n        }\n        {{ model_class }}.before_remove_static { |query|\n          removed_models = {{ model_class }}.find query\n          removed_models_ids = removed_models.map &.id!\n          items = self.find({\n            {{ field_key }}: {\n              \"$in\": removed_models_ids\n            }\n          })\n          if items.size > 0\n            ids = items.map &.id!\n            self.update_by_ids(ids, {\n              {{ mongo_op }}: {\n                {{ field_key }}: {\n                  \"$in\": removed_models_ids\n                }\n              }\n            })\n          end\n        }\n      {% end %}\n\n\n      \n{% if back_reference %}\n        # Updates the reference when a target back-referencing this model gets inserted.\n        {{ model_class }}.after_insert { |inserted_model|\n          sync_field = inserted_model.{{ back_reference.id }}\n          if sync_field\n            self.update_by_id(sync_field, {\n              {% if many %}\n                \"$addToSet\": {\n                  {{ field_key }}: inserted_model.id\n                }\n              {% else %}\n                \"$set\": {\n                  {{ field_key }}: inserted_model.id\n                }\n              {% end %}\n            })\n          end\n        }\n      {% end %}\n\n    \n"}}],"types":[{"html_id":"moongoon/Moongoon/Collection/ReadOnly","path":"Moongoon/Collection/ReadOnly.html","kind":"class","full_name":"Moongoon::Collection::ReadOnly","name":"ReadOnly","abstract":true,"superclass":{"html_id":"moongoon/Moongoon/MongoBase","kind":"class","full_name":"Moongoon::MongoBase","name":"MongoBase"},"ancestors":[{"html_id":"moongoon/Moongoon/Traits/Database/Internal","kind":"module","full_name":"Moongoon::Traits::Database::Internal","name":"Internal"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Get","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Get","name":"Get"},{"html_id":"moongoon/Moongoon/Traits/Database/Indexes","kind":"module","full_name":"Moongoon::Traits::Database::Indexes","name":"Indexes"},{"html_id":"moongoon/Moongoon/Traits/Database/Relationships","kind":"module","full_name":"Moongoon::Traits::Database::Relationships","name":"Relationships"},{"html_id":"moongoon/Moongoon/Traits/Database/Hooks","kind":"module","full_name":"Moongoon::Traits::Database::Hooks","name":"Hooks"},{"html_id":"moongoon/Moongoon/Traits/Database/Read","kind":"module","full_name":"Moongoon::Traits::Database::Read","name":"Read"},{"html_id":"moongoon/Moongoon/MongoBase","kind":"class","full_name":"Moongoon::MongoBase","name":"MongoBase"},{"html_id":"moongoon/Moongoon/Document","kind":"class","full_name":"Moongoon::Document","name":"Document"},{"html_id":"moongoon/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"moongoon/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"moongoon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"moongoon/Moongoon/Traits/Database/Hooks","kind":"module","full_name":"Moongoon::Traits::Database::Hooks","name":"Hooks"},{"html_id":"moongoon/Moongoon/Traits/Database/Indexes","kind":"module","full_name":"Moongoon::Traits::Database::Indexes","name":"Indexes"},{"html_id":"moongoon/Moongoon/Traits/Database/Internal","kind":"module","full_name":"Moongoon::Traits::Database::Internal","name":"Internal"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Get","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Get","name":"Get"},{"html_id":"moongoon/Moongoon/Traits/Database/Read","kind":"module","full_name":"Moongoon::Traits::Database::Read","name":"Read"},{"html_id":"moongoon/Moongoon/Traits/Database/Relationships","kind":"module","full_name":"Moongoon::Traits::Database::Relationships","name":"Relationships"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Collection","kind":"class","full_name":"Moongoon::Collection","name":"Collection"},"doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to query a MongoDB collection.\n\n```\nclass ReadOnly < Models::Collection::ReadOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","class_methods":[{"id":"aggregation_pipeline(*args)-class-method","html_id":"aggregation_pipeline(*args)-class-method","name":"aggregation_pipeline","doc":"Defines an [aggregation pipeline](https://docs.mongodb.com/v3.6/reference/operator/aggregation-pipeline/) that will be used instead of a plain find query.\n\nIf this macro is used, the model will always use the [aggregate](https://docs.mongodb.com/v3.6/reference/command/aggregate/index.html)\nmethod to query documents and will use the stages passed as arguments to aggregate the results.\n\n```\naggregation_pipeline(\n  {\n    \"$addFields\": {\n      count: {\n        \"$size\": \"$array\"\n      }\n    }\n  },\n  {\n    \"$project\": {\n      array: 0\n    }\n  }\n)\n```","summary":"<p>Defines an <a href=\"https://docs.mongodb.com/v3.6/reference/operator/aggregation-pipeline/\" target=\"_blank\">aggregation pipeline</a> that will be used instead of a plain find query.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":null,"def":{"name":"aggregation_pipeline","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@aggregation_stages = [] of BSON\nargs.each do |arg|\n  @@aggregation_stages.try do |a|\n    a << (BSON.new(arg))\n  end\nend\n"}},{"id":"collection-class-method","html_id":"collection-class-method","name":"collection","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to query a MongoDB collection.\n\n```\nclass ReadOnly < Models::Collection::ReadOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"collection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@collection).nil?\n  @@collection = (self.database[collection_name])\nelse\n  value\nend"}},{"id":"count(query=BSON.new,**args):Int32-class-method","html_id":"count(query=BSON.new,**args):Int32-class-method","name":"count","doc":"Counts the number of documents in the collection for a given query.\n\n```\ncount = User.count({ name: \"Julien\" })\n```","summary":"<p>Counts the number of documents in the collection for a given query.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Int32","source_link":null,"def":{"name":"count","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"self.collection.count_documents(query, **args)"}},{"id":"database-class-method","html_id":"database-class-method","name":"database","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to query a MongoDB collection.\n\n```\nclass ReadOnly < Models::Collection::ReadOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"database","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@database).nil?\n  @@database = (if @@database_name == Moongoon.database_name\n    Moongoon.database\n  else\n    Moongoon.client[database_name]\n  end)\nelse\n  value\nend"}},{"id":"database_name-class-method","html_id":"database_name-class-method","name":"database_name","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to query a MongoDB collection.\n\n```\nclass ReadOnly < Models::Collection::ReadOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"database_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@database_name).nil?\n  @@database_name = (Moongoon.database_name)\nelse\n  value\nend"}},{"id":"default_fields(fields)-class-method","html_id":"default_fields(fields)-class-method","name":"default_fields","doc":"Set the `fields` value to use by default when calling `find` methods.\n\n```\ndefault_fields({ ignored_field: 0 })\n```","summary":"<p>Set the <code>fields</code> value to use by default when calling <code><a href=\"../../Moongoon/Collection/ReadOnly.html#find(query=BSON.new,order_by=%7B_id:-1%7D,fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method\">.find</a></code> methods.</p>","abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""}],"args_string":"(fields)","source_link":null,"def":{"name":"default_fields","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@default_fields = BSON.new(fields)"}},{"id":"exist!(query=BSON.new,**args):Bool-class-method","html_id":"exist!(query=BSON.new,**args):Bool-class-method","name":"exist!","doc":"Ensures that at least one document matches the query.\nWill raise when there is no match.\n\n```\nbegin\n  User.exist!({ name: \"Julien\" })\nrescue e : Moongoon::Error::NotFound\n  # No user named Julien found\nend\n```","summary":"<p>Ensures that at least one document matches the query.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Bool","source_link":null,"def":{"name":"exist!","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"count = self.count(query, **args)\nif count > 0\nelse\n  query_json = (BSON.new(query)).to_json\n  ::Moongoon::Log.info do\n    \"[mongo][exists!](#{self.collection_name}) No matches for query:\\n#{query_json}\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\ncount > 0\n"}},{"id":"exist_by_id!(id,query=BSON.new,**args):Bool-class-method","html_id":"exist_by_id!(id,query=BSON.new,**args):Bool-class-method","name":"exist_by_id!","doc":"Same as `self.exist!` but for a single document given its id.\n\n```\nbegin\n  User.exist_by_id!(\"123456\")\nrescue e : Moongoon::Error::NotFound\n  # No user having _id \"123456\" found\nend\n```","summary":"<p>Same as <code>self<a href=\"../../Moongoon/Collection/ReadOnly.html#exist!(query=BSON.new,**args):Bool-class-method\">.exist!</a></code> but for a single document given its id.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Bool","source_link":null,"def":{"name":"exist_by_id!","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nself.exist!(query, **args)\n"}},{"id":"find(query=BSON.new,order_by={_id:-1},fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method","html_id":"find(query=BSON.new,order_by={_id:-1},fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method","name":"find","doc":"Finds one or multiple documents and returns an array of `Moongoon::Collection` instances.\n\nNOTE: Documents are sorted by creation date in descending order.\n\n```\n# Search for persons named Julien\nusers = User.find({ name: \"Julien\" })\n```\n\nIt is possible to use optional arguments to order, paginate and control queries.\n\n```\n# Order the results by birth_date\nusers = User.find({ name: \"Julien\" }, order_by: { birth: 1 })\n\n# Paginate the results.\nusers = User.find({ name: \"Julien\" }, skip: 50, limit: 20)\n\n# Fetch only specific fields.\n# Be extra careful to always fetch mandatory fields.\nusers = User.find({ name: \"Julien\" }, fields: { age: 1, name: 1 })\n```\n\nNOTE: Other arguments are available but will not be documented here.\nFor more details check out the underlying [`cryomongo`](https://github.com/elbywan/cryomongo) driver documentation and code.","summary":"<p>Finds one or multiple documents and returns an array of <code><a href=\"../../Moongoon/Collection.html\">Moongoon::Collection</a></code> instances.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, fields = @@default_fields, skip = <span class=\"n\">0</span>, limit = <span class=\"n\">0</span>, **args) : Array(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"find","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"items = [] of self\nif stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by, skip, limit)\n  (self.collection.aggregate(pipeline, **args)).try do |c|\n    items = c.map do |elt|\n      self.from_bson(elt)\n    end.to_a\n  end\nelse\n  cursor = self.collection.find(query, **args, sort: order_by, projection: fields, skip: skip, limit: limit)\n  items = cursor.map do |elt|\n    self.from_bson(elt)\n  end.to_a\nend\nitems\n"}},{"id":"find!(query,**args):Array(self)-class-method","html_id":"find!(query,**args):Array(self)-class-method","name":"find!","doc":"NOTE: Similar to `self.find`, but raises when no documents are found.\n\n```\nbegin\n  users = User.find!({ name: \"Julien\" })\nrescue\n raise \"No one is named Julien.\"\nend\n```","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../../Moongoon/Collection/ReadOnly.html#find(query=BSON.new,order_by=%7B_id:-1%7D,fields=@@default_fields,skip=0,limit=0,**args):Array(self)-class-method\">.find</a></code>, but raises when no documents are found.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"args_string":"(query, **args) : Array(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"find!","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"items = self.find(query, **args)\nif items.size > 0\nelse\n  query_json = (BSON.new(query)).to_json\n  ::Moongoon::Log.info do\n    \"[mongo][find!](#{self.collection_name}) No matches for query:\\n#{query_json}\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitems\n"}},{"id":"find_by_ids(ids,query=BSON.new,order_by={_id:-1},**args):Array(self)?-class-method","html_id":"find_by_ids(ids,query=BSON.new,order_by={_id:-1},**args):Array(self)?-class-method","name":"find_by_ids","doc":"Finds one or multiple documents by their ids and returns an array of `Moongoon::Collection` instances.\n\nSyntax is similar to `self.find`.\n\n```\nids = [\"1\", \"2\", \"3\"]\nusers = User.find_by_ids(ids)\n```","summary":"<p>Finds one or multiple documents by their ids and returns an array of <code><a href=\"../../Moongoon/Collection.html\">Moongoon::Collection</a></code> instances.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"args_string":"(ids, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, **args) : Array(<span class=\"k\">self</span>)?","source_link":null,"def":{"name":"find_by_ids","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self) | ::Nil","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_ids_filter(query, ids)\nself.find(query, order_by, **args)\n"}},{"id":"find_by_ids!(ids,**args):Array(self)?-class-method","html_id":"find_by_ids!(ids,**args):Array(self)?-class-method","name":"find_by_ids!","doc":"NOTE: Similar to `self.find_by_ids`, but raises when no documents are found.","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../../Moongoon/Collection/ReadOnly.html#find_by_ids(ids,query=BSON.new,order_by=%7B_id:-1%7D,**args):Array(self)?-class-method\">.find_by_ids</a></code>, but raises when no documents are found.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""}],"args_string":"(ids, **args) : Array(<span class=\"k\">self</span>)?","source_link":null,"def":{"name":"find_by_ids!","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self) | ::Nil","visibility":"Public","body":"items = self.find_by_ids(ids, **args)\nif items.size > 0\nelse\n  ::Moongoon::Log.info do\n    \"[mongo][exists!](#{self.collection_name}) No matches for ids #{ids.to_json}.\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitems\n"}},{"id":"find_ids(query=BSON.new,order_by={_id:-1},**args):Array(String)-class-method","html_id":"find_ids(query=BSON.new,order_by={_id:-1},**args):Array(String)-class-method","name":"find_ids","doc":"Finds ids for documents matching the *query* argument and returns them an array of strings.\n\nSyntax is similar to `self.find`.\n\n```\njane_ids = User.find_ids({ name: \"Jane\" })\n```","summary":"<p>Finds ids for documents matching the <em>query</em> argument and returns them an array of strings.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, **args) : Array(String)","source_link":null,"def":{"name":"find_ids","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"ids = [] of String\ncursor = self.collection.find(query, **args, sort: order_by, projection: {_id: 1})\nwhile item = cursor.first?\n  ids << item[\"_id\"].to_s\nend\nids\n"}},{"id":"index(keys:Hash(String,BSON::Value),collection:String?=nil,database:String?=nil,options=Hash(String,BSON::Value).new,name:String?=nil):Nil-class-method","html_id":"index(keys:Hash(String,BSON::Value),collection:String?=nil,database:String?=nil,options=Hash(String,BSON::Value).new,name:String?=nil):Nil-class-method","name":"index","doc":"Same as `self.index` but with hash arguments.\n\n```\nindex ({ \"a\" => 1 }), name: \"index_name\", options: { \"unique\" => true }\n```","summary":"<p>Same as <code>self<a href=\"../../Moongoon/Collection/ReadOnly.html#index(keys:Hash(String,BSON::Value),collection:String?=nil,database:String?=nil,options=Hash(String,BSON::Value).new,name:String?=nil):Nil-class-method\">.index</a></code> but with hash arguments.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Hash(String, BSON::Value)"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"Hash(String, BSON::Value).new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(keys : Hash(String, BSON::Value), collection : String? = <span class=\"n\">nil</span>, database : String? = <span class=\"n\">nil</span>, options = <span class=\"t\">Hash</span>(<span class=\"t\">String</span>, <span class=\"t\">BSON</span><span class=\"t\">::</span><span class=\"t\">Value</span>).<span class=\"k\">new</span>, name : String? = <span class=\"n\">nil</span>) : Nil","source_link":null,"def":{"name":"index","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Hash(String, BSON::Value)"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"Hash(String, BSON::Value).new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"index = BSON.new({\"keys\" => keys, \"options\" => !name ? options : options.merge({\"name\" => name})})\ncb = -> do\n  {(database || self.database_name).not_nil!, (collection || self.collection_name).not_nil!}\nend\n::Moongoon::Traits::Database::Indexes.add_index(index, cb)\n"}},{"id":"index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method","html_id":"index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method","name":"index","doc":"Defines an index that will be applied to this Model's underlying mongo collection.\n\n**Note that the order of fields do matter.**\n\nIf not provided the driver will generate the name of the index from the keys names and order.\n\nPlease have a look at the [MongoDB documentation](https://docs.mongodb.com/manual/reference/command/createIndexes/)\nfor more details about index creation and the list of available index options.\n\n```\n# Specify one or more fields with a type (ascending or descending order, text indexingâ€¦)\nindex keys: { field1: 1, field2: -1 }\n# Set the unique argument to create a unique index.\nindex keys: { field: 1 }, options: { unique: true }\n```","summary":"<p>Defines an index that will be applied to this Model's underlying mongo collection.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"NamedTuple"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(keys : NamedTuple, collection : String? = <span class=\"n\">nil</span>, database : String? = <span class=\"n\">nil</span>, options = <span class=\"t\">NamedTuple</span>.<span class=\"k\">new</span>, name : String? = <span class=\"n\">nil</span>) : Nil","source_link":null,"def":{"name":"index","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"NamedTuple"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"index = BSON.new({keys: keys, options: !name ? options : options.merge({name: name})})\ncb = -> do\n  {(database || self.database_name).not_nil!, (collection || self.collection_name).not_nil!}\nend\n::Moongoon::Traits::Database::Indexes.add_index(index, cb)\n"}}],"constructors":[{"id":"find_by_id(id:String,query=BSON.new,order_by={_id:-1},fields=@@default_fields,**args):self?-class-method","html_id":"find_by_id(id:String,query=BSON.new,order_by={_id:-1},fields=@@default_fields,**args):self?-class-method","name":"find_by_id","doc":"Finds a single document by id and returns a `Moongoon::Collection` instance.\n\nSyntax is similar to `self.find_one`.\n\n```\nuser = User.find_by_id(123456)\n```","summary":"<p>Finds a single document by id and returns a <code><a href=\"../../Moongoon/Collection.html\">Moongoon::Collection</a></code> instance.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""}],"args_string":"(id : String, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, order_by = {_id: <span class=\"n\">-1</span>}, fields = @@default_fields, **args) : <span class=\"k\">self</span>?","source_link":null,"def":{"name":"find_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"item = uninitialized BSON | ::Nil\nquery = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nitem = if stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by)\n  cursor = self.collection.aggregate(pipeline, **args)\n  cursor.try(&.first?)\nelse\n  self.collection.find_one(query, **args, sort: order_by, projection: fields, skip: 0)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_by_id!(id,**args):self-class-method","html_id":"find_by_id!(id,**args):self-class-method","name":"find_by_id!","doc":"NOTE: Similar to `self.find_by_id`, but raises when the document was not found.","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../../Moongoon/Collection/ReadOnly.html#find_by_id(id:String,query=BSON.new,order_by=%7B_id:-1%7D,fields=@@default_fields,**args):self?-class-method\">.find_by_id</a></code>, but raises when the document was not found.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(id, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"find_by_id!","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"item = self.find_by_id(id, **args)\nif item\nelse\n  ::Moongoon::Log.info do\n    \"[mongo][find_by_id!](#{self.collection_name}) Failed to fetch resource with id #{id}.\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitem.not_nil!\n"}},{"id":"find_one(query=BSON.new,fields=@@default_fields,order_by={_id:-1},skip=0,**args):self?-class-method","html_id":"find_one(query=BSON.new,fields=@@default_fields,order_by={_id:-1},skip=0,**args):self?-class-method","name":"find_one","doc":"Finds a single document and returns a `Moongoon::Collection` instance.\n\n```\n# Retrieve a single user named Julien\nuser = User.find_one({ name: \"Julien\" })\n```\n\nThe following optional arguments are available.\n\n```\n# Fetch only specific fields.\n# Be extra careful to always fetch mandatory fields.\nuser = User.find_one({ name: \"Julien\" }, fields: { age: 1, name: 1 })\n\n# Skip some results. Will return the 3rd user called Julien.\nuser = User.find_one({ name: \"Julien\"}, skip: 2)\n```\n\nNOTE: Other arguments are available but will not be documented here.\nFor more details check out the underlying [`cryomongo`](https://github.com/elbywan/cryomongo) driver documentation and code.","summary":"<p>Finds a single document and returns a <code><a href=\"../../Moongoon/Collection.html\">Moongoon::Collection</a></code> instance.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, fields = @@default_fields, order_by = {_id: <span class=\"n\">-1</span>}, skip = <span class=\"n\">0</span>, **args) : <span class=\"k\">self</span>?","source_link":null,"def":{"name":"find_one","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"item = if stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by, skip)\n  cursor = self.collection.aggregate(pipeline, **args)\n  cursor.try(&.first?)\nelse\n  self.collection.find_one(query, **args, sort: order_by, projection: fields, skip: skip)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_one!(query,**args):self-class-method","html_id":"find_one!(query,**args):self-class-method","name":"find_one!","doc":"NOTE: Similar to `self.find_one`, but raises when the document was not found.","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../../Moongoon/Collection/ReadOnly.html#find_one(query=BSON.new,fields=@@default_fields,order_by=%7B_id:-1%7D,skip=0,**args):self?-class-method\">.find_one</a></code>, but raises when the document was not found.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"args_string":"(query, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"find_one!","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"item = self.find_one(query, **args)\nif item\nelse\n  query_json = (BSON.new(query)).to_json\n  ::Moongoon::Log.info do\n    \"[mongo][find_one!](#{self.collection_name}) No matches for query:\\n#{query_json}\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitem\n"}},{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to query a MongoDB collection.\n\n```\nclass ReadOnly < Models::Collection::ReadOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":null,"def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"_id:BSON::ObjectId?-instance-method","html_id":"_id:BSON::ObjectId?-instance-method","name":"_id","doc":"The MongoDB internal id representation.","summary":"<p>The MongoDB internal id representation.</p>","abstract":false,"args":[],"args_string":" : BSON::ObjectId?","source_link":null,"def":{"name":"_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::ObjectId | ::Nil","visibility":"Public","body":"@_id"}},{"id":"_id=(_id:BSON::ObjectId?)-instance-method","html_id":"_id=(_id:BSON::ObjectId?)-instance-method","name":"_id=","doc":"The MongoDB internal id representation.","summary":"<p>The MongoDB internal id representation.</p>","abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::ObjectId | ::Nil"}],"args_string":"(_id : BSON::ObjectId?)","source_link":null,"def":{"name":"_id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::ObjectId | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@_id = _id"}},{"id":"fetch-instance-method","html_id":"fetch-instance-method","name":"fetch","doc":"Returns a fresh copy of this object that is fetched from the database.\n\n```\nuser = User.new(name: \"John\", age: 10)\nUser.update({ name: \"John\", age: 11 })\nputs user.age\n# => 10\nputs user.fetch.age\n# => 11\n```","summary":"<p>Returns a fresh copy of this object that is fetched from the database.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"fetch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"id_check!\nfresh_model = self.class.find_by_id!(id!)\n"}},{"id":"id-instance-method","html_id":"id-instance-method","name":"id","doc":"Converts the MongoDB bson _id to a String representation.","summary":"<p>Converts the MongoDB bson _id to a String representation.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self._id\n  self._id.to_s\nend"}},{"id":"id!-instance-method","html_id":"id!-instance-method","name":"id!","doc":"Converts the MongoDB bson _id to a String representation.\n\nWill raise if _id is nil.","summary":"<p>Converts the MongoDB bson _id to a String representation.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"id!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.id.not_nil!"}},{"id":"id=(id:String)-instance-method","html_id":"id=(id:String)-instance-method","name":"id=","doc":"Set a MongoDB bson _id from a String.","summary":"<p>Set a MongoDB bson _id from a String.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"args_string":"(id : String)","source_link":null,"def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self._id=(BSON::ObjectId.new(id))"}}],"macros":[{"id":"reference(field,*,model,many=false,delete_cascade=false,clear_reference=false,back_reference=nil)-macro","html_id":"reference(field,*,model,many=false,delete_cascade=false,clear_reference=false,back_reference=nil)-macro","name":"reference","doc":"References one or more documents belonging to another collection.\n\nCreates a model field that will reference either one or multiple\nforeign documents depending on the arguments provided.\n\nNOTE: This macro is useful when using named arguments to keep the reference\nin sync when documents are added or removed from the other collection.\n\n```\nclass MyModel < Moongoon::Collection\n  # The following references are not kept in sync because extra named arguments are not used.\n\n  # Reference a single user.\n  reference user_id, model: User\n\n  # References multiple users.\n  reference user_ids, model: User, many: true\n\n  reference user_ids, model: User, many: true\nend\n```\n\n**Named arguments**\n\n- *model*: The referenced model class.\n- *many*: Set to true to reference multiple documents.\n- *delete_cascade*: If true, removes the referenced document(s) when this model is removed.\n- *clear_reference*: If true, sets the reference to nil (if referencing a single document), or removes the id from the\nreference array (if referencing multiple documents) when the referenced document(s) are removed.\n- *back_reference*: The name of the refence, if it exists, in the referenced model that back-references this model.\nIf set, when a referenced document gets inserted, this reference will be updated to add the newly created id.\n\n```\nclass MyModel < Moongoon::Collection\n  # Now some examples that are using extra arguments.\n\n  # References a single user from the User model class.\n  # The user has a field that links to back to this model (best_friend_id).\n  # Whenever a user is inserted, the reference will get updated to point to the linked user.\n  reference user_id, model: User, back_reference: best_friend_id\n\n  # References multiple pets. When this model is removed, all the pets\n  # referenced will be removed as well.\n  reference pet_ids, model: Pet, many: true, delete_cascade: true\n\n  # Whenever a Pet is removed the reference will get updated and the\n  # id of the Pet will be removed from the array.\n  reference pet_id, model: Pet, many: true, clear_reference: true\nend\n```","summary":"<p>References one or more documents belonging to another collection.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"many","doc":null,"default_value":"false","external_name":"many","restriction":""},{"name":"delete_cascade","doc":null,"default_value":"false","external_name":"delete_cascade","restriction":""},{"name":"clear_reference","doc":null,"default_value":"false","external_name":"clear_reference","restriction":""},{"name":"back_reference","doc":null,"default_value":"nil","external_name":"back_reference","restriction":""}],"args_string":"(field, *, model, many = <span class=\"n\">false</span>, delete_cascade = <span class=\"n\">false</span>, clear_reference = <span class=\"n\">false</span>, back_reference = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"reference","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"many","doc":null,"default_value":"false","external_name":"many","restriction":""},{"name":"delete_cascade","doc":null,"default_value":"false","external_name":"delete_cascade","restriction":""},{"name":"clear_reference","doc":null,"default_value":"false","external_name":"clear_reference","restriction":""},{"name":"back_reference","doc":null,"default_value":"nil","external_name":"back_reference","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"      \n{% field_key = field.id %}\n\n      \n{% model_class = model %}\n\n\n      \n{% if many %}\n        # References multiple documents\n        property {{ field_key }} : Array(String) = [] of String\n\n        {% if delete_cascade %}\n          # Cascades on deletion\n\n          self.before_remove { |model|\n            model = model.fetch\n            ids_to_remove = model.try &.{{ field_key }}\n            if ids_to_remove.try(&.size) || 0 > 0\n              {{ model_class }}.remove_by_ids ids_to_remove.not_nil!\n            end\n          }\n\n          self.before_remove_static { |query|\n            models = find query\n            ids_to_remove = [] of String\n            models.each { |model|\n              model.{{ field_key }}.try &.each { |id|\n                ids_to_remove << id\n              }\n            }\n            if ids_to_remove.size > 0\n              {{ model_class }}.remove_by_ids ids_to_remove\n            end\n          }\n        {% end %}\n\n      {% else %}\n        # References a single item\n        property {{ field_key }} : String?\n\n        {% if delete_cascade %}\n          # Cascades on deletion\n\n          self.before_remove { |model|\n            model = model.fetch\n            link = model.try &.{{ field_key }}\n            if link\n              {{ model_class }}.remove_by_id link\n            end\n          }\n\n          self.before_remove_static { |query|\n            models = find query\n            ids_to_remove = [] of String\n            models.each { |model|\n              if id_to_remove = model.{{ field_key }}\n                ids_to_remove <<  id_to_remove\n              end\n            }\n            if ids_to_remove.size > 0\n              {{ model_class }}.remove_by_ids ids_to_remove\n            end\n          }\n        {% end %}\n\n      {% end %}\n\n\n      \n{% if clear_reference %}\n        # Updates the reference when the target gets deleted.\n        {% if many %}\n          {% mongo_op = \"$pull\" %}\n        {% else %}\n          {% mongo_op = \"$unset\" %}\n        {% end %}\n\n        {{ model_class }}.after_remove { |removed_model|\n          items = self.find({\n            {{ field_key }}: removed_model.id\n          })\n          if items.size > 0\n            ids = items.map &.id!\n            self.update_by_ids(ids, {\n              {{ mongo_op }}: {\n                {{ field_key }}: removed_model.id\n              }\n            })\n          end\n        }\n        {{ model_class }}.before_remove_static { |query|\n          removed_models = {{ model_class }}.find query\n          removed_models_ids = removed_models.map &.id!\n          items = self.find({\n            {{ field_key }}: {\n              \"$in\": removed_models_ids\n            }\n          })\n          if items.size > 0\n            ids = items.map &.id!\n            self.update_by_ids(ids, {\n              {{ mongo_op }}: {\n                {{ field_key }}: {\n                  \"$in\": removed_models_ids\n                }\n              }\n            })\n          end\n        }\n      {% end %}\n\n\n      \n{% if back_reference %}\n        # Updates the reference when a target back-referencing this model gets inserted.\n        {{ model_class }}.after_insert { |inserted_model|\n          sync_field = inserted_model.{{ back_reference.id }}\n          if sync_field\n            self.update_by_id(sync_field, {\n              {% if many %}\n                \"$addToSet\": {\n                  {{ field_key }}: inserted_model.id\n                }\n              {% else %}\n                \"$set\": {\n                  {{ field_key }}: inserted_model.id\n                }\n              {% end %}\n            })\n          end\n        }\n      {% end %}\n\n    \n"}}],"types":[]},{"html_id":"moongoon/Moongoon/Collection/UpdateOnly","path":"Moongoon/Collection/UpdateOnly.html","kind":"class","full_name":"Moongoon::Collection::UpdateOnly","name":"UpdateOnly","abstract":true,"superclass":{"html_id":"moongoon/Moongoon/MongoBase","kind":"class","full_name":"Moongoon::MongoBase","name":"MongoBase"},"ancestors":[{"html_id":"moongoon/Moongoon/Traits/Database/Internal","kind":"module","full_name":"Moongoon::Traits::Database::Internal","name":"Internal"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Patch","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Patch","name":"Patch"},{"html_id":"moongoon/Moongoon/Traits/Database/Indexes","kind":"module","full_name":"Moongoon::Traits::Database::Indexes","name":"Indexes"},{"html_id":"moongoon/Moongoon/Traits/Database/Relationships","kind":"module","full_name":"Moongoon::Traits::Database::Relationships","name":"Relationships"},{"html_id":"moongoon/Moongoon/Traits/Database/Hooks","kind":"module","full_name":"Moongoon::Traits::Database::Hooks","name":"Hooks"},{"html_id":"moongoon/Moongoon/Traits/Database/Update","kind":"module","full_name":"Moongoon::Traits::Database::Update","name":"Update"},{"html_id":"moongoon/Moongoon/MongoBase","kind":"class","full_name":"Moongoon::MongoBase","name":"MongoBase"},{"html_id":"moongoon/Moongoon/Document","kind":"class","full_name":"Moongoon::Document","name":"Document"},{"html_id":"moongoon/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"moongoon/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"moongoon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"moongoon/Moongoon/Traits/Database/Hooks","kind":"module","full_name":"Moongoon::Traits::Database::Hooks","name":"Hooks"},{"html_id":"moongoon/Moongoon/Traits/Database/Indexes","kind":"module","full_name":"Moongoon::Traits::Database::Indexes","name":"Indexes"},{"html_id":"moongoon/Moongoon/Traits/Database/Internal","kind":"module","full_name":"Moongoon::Traits::Database::Internal","name":"Internal"},{"html_id":"moongoon/Moongoon/Traits/Database/Methods/Patch","kind":"module","full_name":"Moongoon::Traits::Database::Methods::Patch","name":"Patch"},{"html_id":"moongoon/Moongoon/Traits/Database/Relationships","kind":"module","full_name":"Moongoon::Traits::Database::Relationships","name":"Relationships"},{"html_id":"moongoon/Moongoon/Traits/Database/Update","kind":"module","full_name":"Moongoon::Traits::Database::Update","name":"Update"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Collection","kind":"class","full_name":"Moongoon::Collection","name":"Collection"},"doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to update a MongoDB collection.\n\n```\nclass Partial < Moongoon::Collection::UpdateOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","class_methods":[{"id":"collection-class-method","html_id":"collection-class-method","name":"collection","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to update a MongoDB collection.\n\n```\nclass Partial < Moongoon::Collection::UpdateOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"collection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@collection).nil?\n  @@collection = (self.database[collection_name])\nelse\n  value\nend"}},{"id":"database-class-method","html_id":"database-class-method","name":"database","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to update a MongoDB collection.\n\n```\nclass Partial < Moongoon::Collection::UpdateOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"database","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@database).nil?\n  @@database = (if @@database_name == Moongoon.database_name\n    Moongoon.database\n  else\n    Moongoon.client[database_name]\n  end)\nelse\n  value\nend"}},{"id":"database_name-class-method","html_id":"database_name-class-method","name":"database_name","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to update a MongoDB collection.\n\n```\nclass Partial < Moongoon::Collection::UpdateOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"database_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@database_name).nil?\n  @@database_name = (Moongoon.database_name)\nelse\n  value\nend"}},{"id":"find_and_modify(query,update,fields=@@default_fields,no_hooks=false,**args)-class-method","html_id":"find_and_modify(query,update,fields=@@default_fields,no_hooks=false,**args)-class-method","name":"find_and_modify","doc":"Modifies and returns a single document.\n\nSee the [official documentation](https://docs.mongodb.com/v3.6/reference/command/findAndModify/).\n\n```\nUser.find_and_modify({ name: \"John\" }, { \"$set\": { \"name\": \"Igor\" }})\n```","summary":"<p>Modifies and returns a single document.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, update, fields = @@default_fields, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_modify","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query, update = BSON.new(query), BSON.new(update)\nif no_hooks\nelse\n  new_update = self.before_update_static_call(query, update)\n  if new_update\n    update = new_update\n  end\nend\nitem = self.collection.find_one_and_update(query, update, **args, fields: fields)\nif no_hooks\nelse\n  self.after_update_static_call(query, update)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_and_modify_by_id(id,update,query=BSON.new,no_hooks=false,**args)-class-method","html_id":"find_and_modify_by_id(id,update,query=BSON.new,no_hooks=false,**args)-class-method","name":"find_and_modify_by_id","doc":"Modifies and returns a single document.\n\nSimilar to `self.find_and_modify`, except that a matching on the `_id` field will be added to the *query* argument.","summary":"<p>Modifies and returns a single document.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(id, update, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_modify_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nfind_and_modify(query, update, **args)\n"}},{"id":"find_and_remove(query,fields=@@default_fields,no_hooks=false,**args)-class-method","html_id":"find_and_remove(query,fields=@@default_fields,no_hooks=false,**args)-class-method","name":"find_and_remove","doc":"Removes and returns a single document.\n\nSee the [official documentation](https://docs.mongodb.com/v3.6/reference/command/findAndModify/).\n\n```\nUser.find_and_remove({ name: \"John\" })\n```","summary":"<p>Removes and returns a single document.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, fields = @@default_fields, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_remove","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"@@default_fields","external_name":"fields","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query = BSON.new(query)\nif no_hooks\nelse\n  new_update = self.before_remove_static_call(query)\n  if new_update\n    update = new_update\n  end\nend\nitem = self.collection.find_one_and_delete(query, **args, fields: fields)\nif no_hooks\nelse\n  self.after_remove_static_call(query)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_and_remove_by_id(id,query=BSON.new,no_hooks=false,**args)-class-method","html_id":"find_and_remove_by_id(id,query=BSON.new,no_hooks=false,**args)-class-method","name":"find_and_remove_by_id","doc":"Removes and returns a single document.\n\nSimilar to `self.find_and_remove`, except that a matching on the `_id` field will be added to the *query* argument.","summary":"<p>Removes and returns a single document.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, no_hooks = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"find_and_remove_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nfind_and_remove(query, update, **args)\n"}},{"id":"index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method","html_id":"index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method","name":"index","doc":"Defines an index that will be applied to this Model's underlying mongo collection.\n\n**Note that the order of fields do matter.**\n\nIf not provided the driver will generate the name of the index from the keys names and order.\n\nPlease have a look at the [MongoDB documentation](https://docs.mongodb.com/manual/reference/command/createIndexes/)\nfor more details about index creation and the list of available index options.\n\n```\n# Specify one or more fields with a type (ascending or descending order, text indexingâ€¦)\nindex keys: { field1: 1, field2: -1 }\n# Set the unique argument to create a unique index.\nindex keys: { field: 1 }, options: { unique: true }\n```","summary":"<p>Defines an index that will be applied to this Model's underlying mongo collection.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"NamedTuple"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(keys : NamedTuple, collection : String? = <span class=\"n\">nil</span>, database : String? = <span class=\"n\">nil</span>, options = <span class=\"t\">NamedTuple</span>.<span class=\"k\">new</span>, name : String? = <span class=\"n\">nil</span>) : Nil","source_link":null,"def":{"name":"index","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"NamedTuple"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"index = BSON.new({keys: keys, options: !name ? options : options.merge({name: name})})\ncb = -> do\n  {(database || self.database_name).not_nil!, (collection || self.collection_name).not_nil!}\nend\n::Moongoon::Traits::Database::Indexes.add_index(index, cb)\n"}},{"id":"index(keys:Hash(String,BSON::Value),collection:String?=nil,database:String?=nil,options=Hash(String,BSON::Value).new,name:String?=nil):Nil-class-method","html_id":"index(keys:Hash(String,BSON::Value),collection:String?=nil,database:String?=nil,options=Hash(String,BSON::Value).new,name:String?=nil):Nil-class-method","name":"index","doc":"Same as `self.index` but with hash arguments.\n\n```\nindex ({ \"a\" => 1 }), name: \"index_name\", options: { \"unique\" => true }\n```","summary":"<p>Same as <code>self<a href=\"../../Moongoon/Collection/UpdateOnly.html#index(keys:NamedTuple,collection:String?=nil,database:String?=nil,options=NamedTuple.new,name:String?=nil):Nil-class-method\">.index</a></code> but with hash arguments.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Hash(String, BSON::Value)"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"Hash(String, BSON::Value).new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(keys : Hash(String, BSON::Value), collection : String? = <span class=\"n\">nil</span>, database : String? = <span class=\"n\">nil</span>, options = <span class=\"t\">Hash</span>(<span class=\"t\">String</span>, <span class=\"t\">BSON</span><span class=\"t\">::</span><span class=\"t\">Value</span>).<span class=\"k\">new</span>, name : String? = <span class=\"n\">nil</span>) : Nil","source_link":null,"def":{"name":"index","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Hash(String, BSON::Value)"},{"name":"collection","doc":null,"default_value":"nil","external_name":"collection","restriction":"String | ::Nil"},{"name":"database","doc":null,"default_value":"nil","external_name":"database","restriction":"String | ::Nil"},{"name":"options","doc":null,"default_value":"Hash(String, BSON::Value).new","external_name":"options","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"index = BSON.new({\"keys\" => keys, \"options\" => !name ? options : options.merge({\"name\" => name})})\ncb = -> do\n  {(database || self.database_name).not_nil!, (collection || self.collection_name).not_nil!}\nend\n::Moongoon::Traits::Database::Indexes.add_index(index, cb)\n"}},{"id":"update(query,update,no_hooks=false,**args):Mongo::Commands::Common::UpdateResult?-class-method","html_id":"update(query,update,no_hooks=false,**args):Mongo::Commands::Common::UpdateResult?-class-method","name":"update","doc":"Updates one or more documents in the underlying collection.\n\nEvery document matching the *query* argument will be updated.\nSee the [MongoDB tutorial](https://docs.mongodb.com/v3.6/tutorial/update-documents/)\nfor more information about the syntax.\n\n```\n# Rename every person named \"John\" to \"Igor\".\nUser.update(query: { name: \"John\" }, update: { \"$set\": { name: \"Igor\" } })\n```","summary":"<p>Updates one or more documents in the underlying collection.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, update, no_hooks = <span class=\"n\">false</span>, **args) : Mongo::Commands::Common::UpdateResult?","source_link":null,"def":{"name":"update","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"query, update = BSON.new(query), BSON.new(update)\nif no_hooks\nelse\n  new_update = self.before_update_static_call(query, update)\n  if new_update\n    update = new_update\n  end\nend\nresult = self.collection.update_many(query, update, **args)\nif no_hooks\nelse\n  self.after_update_static_call(query, update)\nend\nresult\n"}},{"id":"update_by_id(id,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","html_id":"update_by_id(id,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","name":"update_by_id","doc":"Updates one document by id.\n\nSimilar to `self.update`, except that a matching on the `_id` field will be added to the *query* argument.\n\n```\nid = 123456\nUser.update_by_id(id, { \"$set\": { \"name\": \"Igor\" }})\n```\n\nIt is possible to add query filters to conditionally prevent an update.\n\n```\n# Updates the user only if he/she is named John.\nUser.update_by_id(id, query: { name: \"John\" }, update: { \"$set\": { name: \"Igor\" }})\n```","summary":"<p>Updates one document by id.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(id, update, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Mongo::Commands::Common::UpdateResult?","source_link":null,"def":{"name":"update_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nupdate(query, update, **args)\n"}},{"id":"update_by_ids(ids,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","html_id":"update_by_ids(ids,update,query=BSON.new,**args):Mongo::Commands::Common::UpdateResult?-class-method","name":"update_by_ids","doc":"Updates one or multiple documents by their ids.\n\nSimilar to `self.update`, except that a matching on multiple `_id`\nfields will be added to the *query* argument.\n\n```\nids = [\"1\", \"2\", \"3\"]\nUser.update_by_ids(ids, { \"$set\": { \"name\": \"Igor\" }})\n```\n\nIt is possible to add query filters.\n\n```\n# Updates the users only if they are named John.\nUser.update_by_ids(ids, query: { name: \"John\" }, update: { \"$set\": { name: \"Igor\" }})\n```","summary":"<p>Updates one or multiple documents by their ids.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(ids, update, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Mongo::Commands::Common::UpdateResult?","source_link":null,"def":{"name":"update_by_ids","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"query = ::Moongoon::Traits::Database::Internal.concat_ids_filter(query, ids)\nupdate(query, update, **args)\n"}}],"constructors":[{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A limited model class for interacting with a MongoDB collection.\n\nNOTE: Similar to `Moongoon::Collection` but can only be used to update a MongoDB collection.\n\n```\nclass Partial < Moongoon::Collection::UpdateOnly\n  collection \"my_models\"\n\n  property name : String?\n  property age : Int32?\nend\n```","summary":"<p>A limited model class for interacting with a MongoDB collection.</p>","abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":null,"def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"_id:BSON::ObjectId?-instance-method","html_id":"_id:BSON::ObjectId?-instance-method","name":"_id","doc":"The MongoDB internal id representation.","summary":"<p>The MongoDB internal id representation.</p>","abstract":false,"args":[],"args_string":" : BSON::ObjectId?","source_link":null,"def":{"name":"_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::ObjectId | ::Nil","visibility":"Public","body":"@_id"}},{"id":"_id=(_id:BSON::ObjectId?)-instance-method","html_id":"_id=(_id:BSON::ObjectId?)-instance-method","name":"_id=","doc":"The MongoDB internal id representation.","summary":"<p>The MongoDB internal id representation.</p>","abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::ObjectId | ::Nil"}],"args_string":"(_id : BSON::ObjectId?)","source_link":null,"def":{"name":"_id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::ObjectId | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@_id = _id"}},{"id":"id-instance-method","html_id":"id-instance-method","name":"id","doc":"Converts the MongoDB bson _id to a String representation.","summary":"<p>Converts the MongoDB bson _id to a String representation.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self._id\n  self._id.to_s\nend"}},{"id":"id!-instance-method","html_id":"id!-instance-method","name":"id!","doc":"Converts the MongoDB bson _id to a String representation.\n\nWill raise if _id is nil.","summary":"<p>Converts the MongoDB bson _id to a String representation.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"id!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.id.not_nil!"}},{"id":"id=(id:String)-instance-method","html_id":"id=(id:String)-instance-method","name":"id=","doc":"Set a MongoDB bson _id from a String.","summary":"<p>Set a MongoDB bson _id from a String.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"args_string":"(id : String)","source_link":null,"def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self._id=(BSON::ObjectId.new(id))"}},{"id":"update(query=BSON.new,**args):self-instance-method","html_id":"update(query=BSON.new,**args):self-instance-method","name":"update","doc":"Updates a document having the same id as this model with the data stored in `self`.\n\nTries to match on `self.id`.\n\n```\nuser = User.new name: \"John\", age: 25\nuser.insert\nuser.age = 26\nuser.update\n```\n\nIt is possible to add query filters to conditionally prevent an update.\n\n```\nuser = User.new name: \"John\", locked: true\nuser.insert\nuser.name = \"Igor\"\n# Prevents updating users that are locked.\nuser.update({ locked: false })\npp User.find_by_id(user.id!).to_json\n# => { \"id\": \"some id\", \"name\": \"John\", \"locked\": true }\n```","summary":"<p>Updates a document having the same id as this model with the data stored in <code>self</code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"update","args":[{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"id_check!\nquery = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nself.update_query(query, **args)\n"}},{"id":"update_query(query,no_hooks=false,**args):self-instance-method","html_id":"update_query(query,no_hooks=false,**args):self-instance-method","name":"update_query","doc":"Updates one or more documents with the data stored in `self`.\n\nEvery document matching the *query* argument will be updated.\n\n```\nuser = User.new name: \"John\", age: 25\nuser = User.new name: \"Jane\", age: 30\nuser.insert\nuser.age = 40\n# Updates both documents\nuser.update_query({ name: {\"$in\": [\"John\", \"Jane\"]} })\n```","summary":"<p>Updates one or more documents with the data stored in <code>self</code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"args_string":"(query, no_hooks = <span class=\"n\">false</span>, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"update_query","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"no_hooks","doc":null,"default_value":"false","external_name":"no_hooks","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if no_hooks\nelse\n  self.class.before_update_call(self)\nend\nself.class.collection.update_many(query, **args, update: {\"$set\": self.to_bson})\nif no_hooks\nelse\n  self.class.after_update_call(self)\nend\nself\n"}}],"macros":[{"id":"reference(field,*,model,many=false,delete_cascade=false,clear_reference=false,back_reference=nil)-macro","html_id":"reference(field,*,model,many=false,delete_cascade=false,clear_reference=false,back_reference=nil)-macro","name":"reference","doc":"References one or more documents belonging to another collection.\n\nCreates a model field that will reference either one or multiple\nforeign documents depending on the arguments provided.\n\nNOTE: This macro is useful when using named arguments to keep the reference\nin sync when documents are added or removed from the other collection.\n\n```\nclass MyModel < Moongoon::Collection\n  # The following references are not kept in sync because extra named arguments are not used.\n\n  # Reference a single user.\n  reference user_id, model: User\n\n  # References multiple users.\n  reference user_ids, model: User, many: true\n\n  reference user_ids, model: User, many: true\nend\n```\n\n**Named arguments**\n\n- *model*: The referenced model class.\n- *many*: Set to true to reference multiple documents.\n- *delete_cascade*: If true, removes the referenced document(s) when this model is removed.\n- *clear_reference*: If true, sets the reference to nil (if referencing a single document), or removes the id from the\nreference array (if referencing multiple documents) when the referenced document(s) are removed.\n- *back_reference*: The name of the refence, if it exists, in the referenced model that back-references this model.\nIf set, when a referenced document gets inserted, this reference will be updated to add the newly created id.\n\n```\nclass MyModel < Moongoon::Collection\n  # Now some examples that are using extra arguments.\n\n  # References a single user from the User model class.\n  # The user has a field that links to back to this model (best_friend_id).\n  # Whenever a user is inserted, the reference will get updated to point to the linked user.\n  reference user_id, model: User, back_reference: best_friend_id\n\n  # References multiple pets. When this model is removed, all the pets\n  # referenced will be removed as well.\n  reference pet_ids, model: Pet, many: true, delete_cascade: true\n\n  # Whenever a Pet is removed the reference will get updated and the\n  # id of the Pet will be removed from the array.\n  reference pet_id, model: Pet, many: true, clear_reference: true\nend\n```","summary":"<p>References one or more documents belonging to another collection.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"many","doc":null,"default_value":"false","external_name":"many","restriction":""},{"name":"delete_cascade","doc":null,"default_value":"false","external_name":"delete_cascade","restriction":""},{"name":"clear_reference","doc":null,"default_value":"false","external_name":"clear_reference","restriction":""},{"name":"back_reference","doc":null,"default_value":"nil","external_name":"back_reference","restriction":""}],"args_string":"(field, *, model, many = <span class=\"n\">false</span>, delete_cascade = <span class=\"n\">false</span>, clear_reference = <span class=\"n\">false</span>, back_reference = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"reference","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"many","doc":null,"default_value":"false","external_name":"many","restriction":""},{"name":"delete_cascade","doc":null,"default_value":"false","external_name":"delete_cascade","restriction":""},{"name":"clear_reference","doc":null,"default_value":"false","external_name":"clear_reference","restriction":""},{"name":"back_reference","doc":null,"default_value":"nil","external_name":"back_reference","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"      \n{% field_key = field.id %}\n\n      \n{% model_class = model %}\n\n\n      \n{% if many %}\n        # References multiple documents\n        property {{ field_key }} : Array(String) = [] of String\n\n        {% if delete_cascade %}\n          # Cascades on deletion\n\n          self.before_remove { |model|\n            model = model.fetch\n            ids_to_remove = model.try &.{{ field_key }}\n            if ids_to_remove.try(&.size) || 0 > 0\n              {{ model_class }}.remove_by_ids ids_to_remove.not_nil!\n            end\n          }\n\n          self.before_remove_static { |query|\n            models = find query\n            ids_to_remove = [] of String\n            models.each { |model|\n              model.{{ field_key }}.try &.each { |id|\n                ids_to_remove << id\n              }\n            }\n            if ids_to_remove.size > 0\n              {{ model_class }}.remove_by_ids ids_to_remove\n            end\n          }\n        {% end %}\n\n      {% else %}\n        # References a single item\n        property {{ field_key }} : String?\n\n        {% if delete_cascade %}\n          # Cascades on deletion\n\n          self.before_remove { |model|\n            model = model.fetch\n            link = model.try &.{{ field_key }}\n            if link\n              {{ model_class }}.remove_by_id link\n            end\n          }\n\n          self.before_remove_static { |query|\n            models = find query\n            ids_to_remove = [] of String\n            models.each { |model|\n              if id_to_remove = model.{{ field_key }}\n                ids_to_remove <<  id_to_remove\n              end\n            }\n            if ids_to_remove.size > 0\n              {{ model_class }}.remove_by_ids ids_to_remove\n            end\n          }\n        {% end %}\n\n      {% end %}\n\n\n      \n{% if clear_reference %}\n        # Updates the reference when the target gets deleted.\n        {% if many %}\n          {% mongo_op = \"$pull\" %}\n        {% else %}\n          {% mongo_op = \"$unset\" %}\n        {% end %}\n\n        {{ model_class }}.after_remove { |removed_model|\n          items = self.find({\n            {{ field_key }}: removed_model.id\n          })\n          if items.size > 0\n            ids = items.map &.id!\n            self.update_by_ids(ids, {\n              {{ mongo_op }}: {\n                {{ field_key }}: removed_model.id\n              }\n            })\n          end\n        }\n        {{ model_class }}.before_remove_static { |query|\n          removed_models = {{ model_class }}.find query\n          removed_models_ids = removed_models.map &.id!\n          items = self.find({\n            {{ field_key }}: {\n              \"$in\": removed_models_ids\n            }\n          })\n          if items.size > 0\n            ids = items.map &.id!\n            self.update_by_ids(ids, {\n              {{ mongo_op }}: {\n                {{ field_key }}: {\n                  \"$in\": removed_models_ids\n                }\n              }\n            })\n          end\n        }\n      {% end %}\n\n\n      \n{% if back_reference %}\n        # Updates the reference when a target back-referencing this model gets inserted.\n        {{ model_class }}.after_insert { |inserted_model|\n          sync_field = inserted_model.{{ back_reference.id }}\n          if sync_field\n            self.update_by_id(sync_field, {\n              {% if many %}\n                \"$addToSet\": {\n                  {{ field_key }}: inserted_model.id\n                }\n              {% else %}\n                \"$set\": {\n                  {{ field_key }}: inserted_model.id\n                }\n              {% end %}\n            })\n          end\n        }\n      {% end %}\n\n    \n"}}],"types":[]},{"html_id":"moongoon/Moongoon/Collection/Versioning","path":"Moongoon/Collection/Versioning.html","kind":"module","full_name":"Moongoon::Collection::Versioning","name":"Versioning","abstract":false,"superclass":null,"ancestors":[{"html_id":"moongoon/Moongoon/Traits/Database/Versioning","kind":"module","full_name":"Moongoon::Traits::Database::Versioning","name":"Versioning"}],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"moongoon/Moongoon/Traits/Database/Versioning","kind":"module","full_name":"Moongoon::Traits::Database::Versioning","name":"Versioning"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Collection","kind":"class","full_name":"Moongoon::Collection","name":"Collection"},"doc":"Include this module to enable resource versioning.","summary":"<p>Include this module to enable resource versioning.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"count_versions(**args):Int32|Int64-instance-method","html_id":"count_versions(**args):Int32|Int64-instance-method","name":"count_versions","doc":"Counts the number of versions associated with this model.\n\n```\nuser = User.new name: \"Jane\"\nuser.insert\nuser.create_version\nnb_of_versions = User.count_versions user\n```","summary":"<p>Counts the number of versions associated with this model.</p>","abstract":false,"args":[],"args_string":"(**args) : Int32 | Int64","source_link":null,"def":{"name":"count_versions","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | Int64","visibility":"Public","body":"self.class.count_versions(self.id, **args)"}},{"id":"create_version:String?-instance-method","html_id":"create_version:String?-instance-method","name":"create_version","doc":"Saves a copy of the model in the history collection and returns the id of the copy.\n\nNOTE: Does not use the model data but reads the latest version from the database before copying.\n\n```\nuser = User.new name: \"Jane\"\nuser.insert\nuser.create_version\n```","summary":"<p>Saves a copy of the model in the history collection and returns the id of the copy.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"create_version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"self.class.create_version_by_id(self.id!)"}},{"id":"create_version(&block:self->self):String?-instance-method","html_id":"create_version(&block:self->self):String?-instance-method","name":"create_version","doc":"Saves a copy with changes of the model in the history collection and\nreturns the id of the copy.\n\nThe *block* argument can be used to alter the model before insertion.\n\n```\nuser = User.new name: \"Jane\", age: 20\nuser.insert\nuser.create_version &.tap { |data|\n  # \"data\" is the model representation of the document that gets copied.\n  data.key = data.key + 1\n}\n```","summary":"<p>Saves a copy with changes of the model in the history collection and returns the id of the copy.</p>","abstract":false,"args":[],"args_string":"(&block : <span class=\"k\">self</span> -> <span class=\"k\">self</span>) : String?","source_link":null,"def":{"name":"create_version","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(self -> self)"},"return_type":"String | ::Nil","visibility":"Public","body":"self.class.create_version_by_id(self.id!, &block)"}},{"id":"find_all_versions(**args):Array(self)-instance-method","html_id":"find_all_versions(**args):Array(self)-instance-method","name":"find_all_versions","doc":"Finds all versions of the model and returns an array of `Moongoon::Collection` instances.\n\nNOTE: Versions are sorted by creation date.\n\n```\nuser = User.new name: \"Jane\"\nuser.insert\nuser.create_version\nversions = user.find_all_versions\n```","summary":"<p>Finds all versions of the model and returns an array of <code><a href=\"../../Moongoon/Collection.html\">Moongoon::Collection</a></code> instances.</p>","abstract":false,"args":[],"args_string":"(**args) : Array(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"find_all_versions","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"id_check!\nself.class.find_all_versions(self.id, **args)\n"}},{"id":"find_latest_version(**args):self?-instance-method","html_id":"find_latest_version(**args):self?-instance-method","name":"find_latest_version","doc":"Finds the latest version of a model and returns an instance of `Moongoon::Collection`.\n\nSame syntax as `Moongoon::Collection#find_by_id`, except that specifying the id is not needed.\n\n```\nuser = User.new\nuser.id = \"123456\"\nuser_version = user.find_latest_version\n```","summary":"<p>Finds the latest version of a model and returns an instance of <code><a href=\"../../Moongoon/Collection.html\">Moongoon::Collection</a></code>.</p>","abstract":false,"args":[],"args_string":"(**args) : <span class=\"k\">self</span>?","source_link":null,"def":{"name":"find_latest_version","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"id_check!\nself.class.find_latest_version_by_id(self.id, **args)\n"}}],"macros":[{"id":"versioning(*,ref_field=nil,auto=false,create_index=false,&transform)-macro","html_id":"versioning(*,ref_field=nil,auto=false,create_index=false,&amp;transform)-macro","name":"versioning","doc":"Enable versioning for this collection.\n\nManages a history in separate mongo collection and adds query methods.\nThe name of the versioning collection is equal to the name of the base\ncollection with a \"_history\" suffix appended.\n\nNOTE: Documents in the history collection will follow the same data model as\nthe base documents, except for an extra field that will contain a back\nreference to the base document id.\n\n**Arguments**\n\n- *ref_field*: The name of the reference field that will point to the original document.\nDefaults to the name of the Class in pascal_case with an \"_id\" suffix appended.\n- *create_index*: if set to true, will create an index on the reference field in the history collection.\n- *auto*: if the auto flag is true, every insertion and update will be recorded.\nWithout the auto flag, a version will only be created programatically when calling\nthe `create_version` methods.\n- *transform*: a block that will be executed to transform the BSON document before insertion.\n\n```\nclass MyModel < Moongoon::Collection\n  include Versioning\n\n  collection \"my_model\"\n  versioning auto: true\nend\n```","summary":"<p>Enable versioning for this collection.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"ref_field","doc":null,"default_value":"nil","external_name":"ref_field","restriction":""},{"name":"auto","doc":null,"default_value":"false","external_name":"auto","restriction":""},{"name":"create_index","doc":null,"default_value":"false","external_name":"create_index","restriction":""}],"args_string":"(*, ref_field = <span class=\"n\">nil</span>, auto = <span class=\"n\">false</span>, create_index = <span class=\"n\">false</span>, &transform)","source_link":null,"def":{"name":"versioning","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"ref_field","doc":null,"default_value":"nil","external_name":"ref_field","restriction":""},{"name":"auto","doc":null,"default_value":"false","external_name":"auto","restriction":""},{"name":"create_index","doc":null,"default_value":"false","external_name":"create_index","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":""},"visibility":"Public","body":"      \n{% if ref_field %}\n        @@versioning_id_field = {{ ref_field.id.stringify }}\n      {% end %}\n\n\n      \n{% if transform %}\n        @@versioning_transform = Proc(BSON, BSON, BSON).new {{ transform }}\n      {% end %}\n\n\n      \n{% if create_index %}\n        index keys: {@@versioning_id_field => 1}, collection: \"#{@@collection_name}_history\"\n      {% end %}\n\n\n      \n{% if auto %}\n      # After an insertion, copy the document in the history collection.\n      after_insert { |model|\n        db = {{ @type }}.database\n        collection = {{ @type }}.collection\n        history_collection = {{ @type }}.history_collection\n\n        data = collection.find_one({_id: model._id })\n\n        if data\n          updated_data = BSON.new\n          data.each { |k, v|\n            if k == \"_id\"\n              updated_data[k] = BSON::ObjectId.new\n            else\n              updated_data[k] = v\n            end\n          }\n          @@versioning_transform.try { |cb|\n            updated_data = cb.call(updated_data, data)\n          }\n          updated_data[@@versioning_id_field] = data[\"_id\"].to_s\n          history_collection.insert_one(updated_data)\n        end\n      }\n\n      # After an update, copy the updated document in the history collection.\n      after_update { |model|\n        db = {{ @type }}.database\n        collection = {{ @type }}.collection\n        history_collection = {{ @type }}.history_collection\n\n        data = collection.find_one({_id: model._id })\n\n        if data\n          updated_data = BSON.new\n          data.each { |k, v|\n            if k == \"_id\"\n              updated_data[k] = BSON::ObjectId.new\n            else\n              updated_data[k] = v\n            end\n          }\n          @@versioning_transform.try { |cb|\n            updated_data = cb.call(updated_data, data)\n          }\n          updated_data[@@versioning_id_field] = data[\"_id\"].to_s\n          history_collection.insert_one(updated_data)\n        end\n      }\n\n      # After a static update, copy the document(s) in the history collection.\n      after_update_static { |query, _|\n        db = {{ @type }}.database\n        collection = {{ @type }}.collection\n        history_collection = {{ @type }}.history_collection\n\n        cursor = collection.find(query)\n        bulk = history_collection.bulk(ordered: true)\n        cursor.each do |model|\n          updated_model = BSON.new\n          model.each { |k, v|\n            if k == \"_id\"\n              updated_model[k] = BSON::ObjectId.new\n            else\n              updated_model[k] = v\n            end\n          }\n          @@versioning_transform.try { |cb|\n            updated_model = cb.call(updated_model, model)\n          }\n          updated_model[@@versioning_id_field] = model[\"_id\"].to_s\n          bulk.insert_one(updated_model)\n        end\n        bulk.execute\n        nil\n      }\n      {% end %}\n\n    \n"}}],"types":[{"html_id":"moongoon/Moongoon/Collection/Versioning/Static","path":"Moongoon/Collection/Versioning/Static.html","kind":"module","full_name":"Moongoon::Collection::Versioning::Static","name":"Static","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Collection/Versioning","kind":"module","full_name":"Moongoon::Collection::Versioning","name":"Versioning"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"clear_history:Nil-instance-method","html_id":"clear_history:Nil-instance-method","name":"clear_history","doc":"Clears the history collection.\n\nNOTE: **Use with caution!**\n\nWill remove all the versions in the history collection.","summary":"<p>Clears the history collection.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":null,"def":{"name":"clear_history","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"self.history_collection.delete_many(BSON.new)"}},{"id":"count_versions(id,query=BSON.new,**args):Int32|Int64-instance-method","html_id":"count_versions(id,query=BSON.new,**args):Int32|Int64-instance-method","name":"count_versions","doc":"Counts the number of versions associated with a document that matches the *id* argument.\n\n```\nuser_id = \"123456\"\nUser.count_versions user_id\n```","summary":"<p>Counts the number of versions associated with a document that matches the <em>id</em> argument.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, **args) : Int32 | Int64","source_link":null,"def":{"name":"count_versions","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | Int64","visibility":"Public","body":"history_collection = self.history_collection\nquery = (BSON.new({@@versioning_id_field => id})).append(BSON.new(query))\nhistory_collection.count_documents(query, **args)\n"}},{"id":"create_version_by_id(id):String?-instance-method","html_id":"create_version_by_id(id):String?-instance-method","name":"create_version_by_id","doc":"Saves a copy of a document matching the *id* argument in the history\ncollection and returns the id of the copy.\n\nNOTE: similar to `create_version`.","summary":"<p>Saves a copy of a document matching the <em>id</em> argument in the history collection and returns the id of the copy.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(id) : String?","source_link":null,"def":{"name":"create_version_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"self.create_version_by_id(id) do |data|\n  data\nend"}},{"id":"create_version_by_id(id,&block:self->self):String?-instance-method","html_id":"create_version_by_id(id,&block:self->self):String?-instance-method","name":"create_version_by_id","doc":"Saves a copy with changes of a document matching the *id* argument\nin the history collection and returns the id of the copy.\n\nNOTE: similar to `create_version`.","summary":"<p>Saves a copy with changes of a document matching the <em>id</em> argument in the history collection and returns the id of the copy.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(id, &block : <span class=\"k\">self</span> -> <span class=\"k\">self</span>) : String?","source_link":null,"def":{"name":"create_version_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(self -> self)"},"return_type":"String | ::Nil","visibility":"Public","body":"version_id : String | ::Nil = nil\noriginal = self.find_by_id(id)\nhistory_collection = self.history_collection\nif original\n  oid = BSON::ObjectId.new\n  original_bson = original.to_bson\n  original_oid = original._id\n  version_id = oid.to_s\n  original._id=(oid)\n  original = yield original\n  version_bson = original.to_bson\n  updated_model = @@versioning_transform.try do |cb|\n    version_bson = cb.call(version_bson, original_bson)\n  end\n  version_bson[@@versioning_id_field] = original_oid.to_s\n  history_collection.insert_one(version_bson)\nend\nversion_id\n"}},{"id":"find_all_versions(id,query=BSON.new,fields=nil,skip=0,limit=0,order_by={_id:-1},**args):Array(self)-instance-method","html_id":"find_all_versions(id,query=BSON.new,fields=nil,skip=0,limit=0,order_by={_id:-1},**args):Array(self)-instance-method","name":"find_all_versions","doc":"Finds all versions for a document matching has the *id* argument and returns an array of `Moongoon::Collection` instances.\n\nNOTE: Versions are sorted by creation date.\n\n```\nuser_id = \"123456\"\nversions = User.find_all_versions user_id\n```","summary":"<p>Finds all versions for a document matching has the <em>id</em> argument and returns an array of <code><a href=\"../../../Moongoon/Collection.html\">Moongoon::Collection</a></code> instances.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, fields = <span class=\"n\">nil</span>, skip = <span class=\"n\">0</span>, limit = <span class=\"n\">0</span>, order_by = {_id: <span class=\"n\">-1</span>}, **args) : Array(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"find_all_versions","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"items = [] of self\nhistory_collection = self.history_collection\nquery = (BSON.new({@@versioning_id_field => id})).append(BSON.new(query))\nif stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by, skip, limit)\n  cursor = history_collection.aggregate(pipeline, **args)\n  cursor.try do |c|\n    items = c.map do |b|\n      self.from_bson(b)\n    end.to_a\n  end\nelse\n  cursor = history_collection.find(query, **args, sort: order_by, projection: fields)\n  items = cursor.map do |b|\n    self.from_bson(b)\n  end.to_a\nend\nitems\n"}},{"id":"find_latest_version_by_id(id,fields=nil,**args):self?-instance-method","html_id":"find_latest_version_by_id(id,fields=nil,**args):self?-instance-method","name":"find_latest_version_by_id","doc":"Finds the latest version of a model by id and returns an instance of `Moongoon::Collection`.\n\nSame syntax as `Moongoon::Collection.find_by_id`.\n\n```\n# \"123456\" is an _id in the original collection.\nuser_version = user.find_latest_version_by_id \"123456\"\n```","summary":"<p>Finds the latest version of a model by id and returns an instance of <code><a href=\"../../../Moongoon/Collection.html\">Moongoon::Collection</a></code>.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""}],"args_string":"(id, fields = <span class=\"n\">nil</span>, **args) : <span class=\"k\">self</span>?","source_link":null,"def":{"name":"find_latest_version_by_id","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"history_collection = self.history_collection\nquery = {@@versioning_id_field => id}\norder_by = {_id: -1}\nitem = if stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, limit: 1)\n  cursor = history_collection.aggregate(pipeline, **args)\n  cursor.try(&.first?)\nelse\n  history_collection.find_one(query, **args, sort: order_by, skip: 0, projection: fields)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_specific_version(id,query=BSON.new,fields=nil,skip=0,**args):self?-instance-method","html_id":"find_specific_version(id,query=BSON.new,fields=nil,skip=0,**args):self?-instance-method","name":"find_specific_version","doc":"Finds a specific version of a model by id and returns an instance of `Moongoon::Collection`.\n\nSame syntax as `Moongoon::Collection.find_by_id`.\n\n```\n# \"123456\" is an _id in the history collection.\nuser_version = user.find_specific_version \"123456\"\n```","summary":"<p>Finds a specific version of a model by id and returns an instance of <code><a href=\"../../../Moongoon/Collection.html\">Moongoon::Collection</a></code>.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""}],"args_string":"(id, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, fields = <span class=\"n\">nil</span>, skip = <span class=\"n\">0</span>, **args) : <span class=\"k\">self</span>?","source_link":null,"def":{"name":"find_specific_version","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"history_collection = self.history_collection\nfull_query = ::Moongoon::Traits::Database::Internal.concat_id_filter(query, id)\nitem = if stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(full_query, stages, fields, skip: skip)\n  cursor = history_collection.aggregate(pipeline, **args)\n  cursor.try(&.first?)\nelse\n  history_collection.find_one(full_query, **args, projection: fields, skip: skip)\nend\nif item\n  self.new(item)\nend\n"}},{"id":"find_specific_version!(id,**args):self-instance-method","html_id":"find_specific_version!(id,**args):self-instance-method","name":"find_specific_version!","doc":"NOTE: Similar to `self.find_specific_version` but will raise if the version is not found.","summary":"<p><span class=\"flag purple\">NOTE</span>  Similar to <code>self<a href=\"../../../Moongoon/Collection/Versioning/Static.html#find_specific_version(id,query=BSON.new,fields=nil,skip=0,**args):self?-instance-method\">.find_specific_version</a></code> but will raise if the version is not found.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(id, **args) : <span class=\"k\">self</span>","source_link":null,"def":{"name":"find_specific_version!","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"item = find_specific_version(id, **args)\nif item\nelse\n  ::Moongoon::Log.info do\n    \"[mongo][find_specific_version](#{self.collection_name}) Failed to fetch resource with id #{id}.\"\n  end\n  raise(::Moongoon::Error::NotFound.new)\nend\nitem\n"}},{"id":"find_specific_versions(ids,query=BSON.new,fields=nil,skip=0,limit=0,order_by={_id:-1},**args):Array(self)-instance-method","html_id":"find_specific_versions(ids,query=BSON.new,fields=nil,skip=0,limit=0,order_by={_id:-1},**args):Array(self)-instance-method","name":"find_specific_versions","doc":"Finds one or more versions by their ids and returns an array of `Moongoon::Collection` instances.\n\nNOTE: Versions are sorted by creation date in descending order.\n\n```\nnames = [\"John\", \"Jane\"]\nids = names.map { |name|\n  user = User.new name: name\n  user.insert\n  user.create_version\n}\n# Contains one version for both models.\nversions = User.find_specific_versions ids\n```","summary":"<p>Finds one or more versions by their ids and returns an array of <code><a href=\"../../../Moongoon/Collection.html\">Moongoon::Collection</a></code> instances.</p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"args_string":"(ids, query = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, fields = <span class=\"n\">nil</span>, skip = <span class=\"n\">0</span>, limit = <span class=\"n\">0</span>, order_by = {_id: <span class=\"n\">-1</span>}, **args) : Array(<span class=\"k\">self</span>)","source_link":null,"def":{"name":"find_specific_versions","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":""},{"name":"query","doc":null,"default_value":"BSON.new","external_name":"query","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"skip","doc":null,"default_value":"0","external_name":"skip","restriction":""},{"name":"limit","doc":null,"default_value":"0","external_name":"limit","restriction":""},{"name":"order_by","doc":null,"default_value":"{_id: -1}","external_name":"order_by","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"items = [] of self\nhistory_collection = self.history_collection\nquery = ::Moongoon::Traits::Database::Internal.concat_ids_filter(query, ids)\nif stages = @@aggregation_stages\n  pipeline = ::Moongoon::Traits::Database::Internal.format_aggregation(query, stages, fields, order_by, skip, limit)\n  cursor = history_collection.aggregate(pipeline, **args)\n  cursor.try do |c|\n    items = c.map do |b|\n      self.from_bson(b)\n    end.to_a\n  end\nelse\n  cursor = history_collection.find(query, **args, sort: order_by, projection: fields)\n  items = cursor.map do |b|\n    self.from_bson(b)\n  end.to_a\nend\nitems\n"}}],"macros":[],"types":[]}]}]},{"html_id":"moongoon/Moongoon/Database","path":"Moongoon/Database.html","kind":"module","full_name":"Moongoon::Database","name":"Database","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon","kind":"module","full_name":"Moongoon","name":"Moongoon"},"doc":"Used to connect to a MongoDB database instance.","summary":"<p>Used to connect to a MongoDB database instance.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"after_connect(&block:Proc(Nil))-instance-method","html_id":"after_connect(&block:Proc(Nil))-instance-method","name":"after_connect","doc":"Pass a block that will get executed after the database has been successfully connected and after the scripts are run.\n\n```\nMoongoon::Database.after_connect {\n  # ... #\n}\n```","summary":"<p>Pass a block that will get executed after the database has been successfully connected and after the scripts are run.</p>","abstract":false,"args":[],"args_string":"(&block : Proc(Nil))","source_link":null,"def":{"name":"after_connect","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(Nil)"},"return_type":"","visibility":"Public","body":"@@after_scripts_blocks << block"}},{"id":"after_connect_before_scripts(&block:Proc(Nil))-instance-method","html_id":"after_connect_before_scripts(&block:Proc(Nil))-instance-method","name":"after_connect_before_scripts","doc":"Pass a block that will get executed after the database has been successfully connected but before the scripts are run.\n\n```\nMoongoon::Database.after_connect_before_scripts {\n  # ... #\n}\n```","summary":"<p>Pass a block that will get executed after the database has been successfully connected but before the scripts are run.</p>","abstract":false,"args":[],"args_string":"(&block : Proc(Nil))","source_link":null,"def":{"name":"after_connect_before_scripts","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(Nil)"},"return_type":"","visibility":"Public","body":"@@after_connect_blocks << block"}},{"id":"before_connect(&block:Proc(Nil))-instance-method","html_id":"before_connect(&block:Proc(Nil))-instance-method","name":"before_connect","doc":"Pass a block that will get executed before the server tries to connect to the database.\n\n```\nMoongoon::Database.before_connect {\n  puts \"Before connectingâ€¦\"\n}\n```","summary":"<p>Pass a block that will get executed before the server tries to connect to the database.</p>","abstract":false,"args":[],"args_string":"(&block : Proc(Nil))","source_link":null,"def":{"name":"before_connect","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(Nil)"},"return_type":"","visibility":"Public","body":"@@before_connect_blocks << block"}},{"id":"connect(database_url:String=&quot;mongodb://localhost:27017&quot;,database_name:String=&quot;database&quot;,*,reconnection_delay=5.seconds)-instance-method","html_id":"connect(database_url:String=&quot;mongodb://localhost:27017&quot;,database_name:String=&quot;database&quot;,*,reconnection_delay=5.seconds)-instance-method","name":"connect","doc":"Connects to MongoDB.\n\n```\n# Arguments are all optional, their default values are the ones defined below:\nMoongoon.connect(\"mongodb://localhost:27017\", \"database\", reconnection_delay: 5.seconds)\n```","summary":"<p>Connects to MongoDB.</p>","abstract":false,"args":[{"name":"database_url","doc":null,"default_value":"\"mongodb://localhost:27017\"","external_name":"database_url","restriction":"String"},{"name":"database_name","doc":null,"default_value":"\"database\"","external_name":"database_name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"reconnection_delay","doc":null,"default_value":"5.seconds","external_name":"reconnection_delay","restriction":""}],"args_string":"(database_url : String = <span class=\"s\">&quot;mongodb://localhost:27017&quot;</span>, database_name : String = <span class=\"s\">&quot;database&quot;</span>, *, reconnection_delay = <span class=\"n\">5</span>.seconds)","source_link":null,"def":{"name":"connect","args":[{"name":"database_url","doc":null,"default_value":"\"mongodb://localhost:27017\"","external_name":"database_url","restriction":"String"},{"name":"database_name","doc":null,"default_value":"\"database\"","external_name":"database_name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"reconnection_delay","doc":null,"default_value":"5.seconds","external_name":"reconnection_delay","restriction":""}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@database_name = database_name\n@@before_connect_blocks.each(&.call)\n::Moongoon::Log.info do\n  \"Connecting to MongoDB @ #{database_url}\"\nend\nclient = Mongo::Client.new(database_url)\n@@client = client\n::Moongoon::Log.info do\n  \"Using database #{database_name} as default.\"\nend\nloop do\n  begin\n    client.command(Mongo::Commands::Ping)\n    ::Moongoon::Log.info do\n      \"Connected to MongoDB.\"\n    end\n    break\n  rescue error\n    ::Moongoon::Log.error do\n      \"#{error}\\nCould not connect to MongoDB, retrying in #{reconnection_delay} second(s).\"\n    end\n    sleep(reconnection_delay)\n  end\nend\n@@after_connect_blocks.each(&.call)\nScripts.process\n@@after_scripts_blocks.each(&.call)\n"}},{"id":"connection_with_lock(lock_name:String,*,delay=0.5.seconds,abort_if_locked=false,&block:Proc(Mongo::Client,Mongo::Database,Nil))-instance-method","html_id":"connection_with_lock(lock_name:String,*,delay=0.5.seconds,abort_if_locked=false,&block:Proc(Mongo::Client,Mongo::Database,Nil))-instance-method","name":"connection_with_lock","doc":"Acquires a database lock and yields the client and database objects.\n\nWill acquire a lock named *lock_name*, polling the DB every *delay* to check the lock status.\nIf *abort_if_locked* is true the block will not be executed and this method will return if the lock is acquired already.\n\n```\n# If another connection uses the \"query\" lock, it will wait\n# until this block has completed before perfoming its own work.\nMoongoon.connection_with_lock \"query\" { |client, db|\n  collection = db[\"some_collection\"]\n  data = collection.find query\n  pp data\n}\n```","summary":"<p>Acquires a database lock and yields the client and database objects.</p>","abstract":false,"args":[{"name":"lock_name","doc":null,"default_value":"","external_name":"lock_name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"delay","doc":null,"default_value":"0.5.seconds","external_name":"delay","restriction":""},{"name":"abort_if_locked","doc":null,"default_value":"false","external_name":"abort_if_locked","restriction":""}],"args_string":"(lock_name : String, *, delay = <span class=\"n\">0.5</span>.seconds, abort_if_locked = <span class=\"n\">false</span>, &block : Proc(Mongo::Client, Mongo::Database, Nil))","source_link":null,"def":{"name":"connection_with_lock","args":[{"name":"lock_name","doc":null,"default_value":"","external_name":"lock_name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"delay","doc":null,"default_value":"0.5.seconds","external_name":"delay","restriction":""},{"name":"abort_if_locked","doc":null,"default_value":"false","external_name":"abort_if_locked","restriction":""}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(Mongo::Client, Mongo::Database, Nil)"},"return_type":"","visibility":"Public","body":"loop do\n  begin\n    lock = database[\"_locks\"].find_one_and_update(filter: {_id: lock_name}, update: {\"$setOnInsert\": {date: Time.utc}}, upsert: true, write_concern: Mongo::WriteConcern.new(w: \"majority\"))\n    if abort_if_locked && lock\n      return\n    end\n    if lock\n    else\n      break\n    end\n  rescue\n  end\n  sleep(delay)\nend\nbegin\n  block.call(client, database)\nensure\n  database[\"_locks\"].delete_one({_id: lock_name}, write_concern: Mongo::WriteConcern.new(w: \"majority\"))\nend\n"}}],"macros":[],"types":[{"html_id":"moongoon/Moongoon/Database/Scripts","path":"Moongoon/Database/Scripts.html","kind":"module","full_name":"Moongoon::Database::Scripts","name":"Scripts","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"SCRIPT_CLASSES","name":"SCRIPT_CLASSES","value":"[] of Class","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Database","kind":"module","full_name":"Moongoon::Database","name":"Database"},"doc":"This module handles database migration scripts.","summary":"<p>This module handles database migration scripts.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"moongoon/Moongoon/Database/Scripts/Base","path":"Moongoon/Database/Scripts/Base.html","kind":"class","full_name":"Moongoon::Database::Scripts::Base","name":"Base","abstract":true,"superclass":{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"moongoon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Database/Scripts","kind":"module","full_name":"Moongoon::Database::Scripts","name":"Scripts"},"doc":"Scripts inherit from this class.\n\n### Example\n\n```\nclass Moongoon::Database::Scripts::Test < Moongoon::Database::Scripts::Base\n  # Scripts run in ascending order.\n  # Default order if not specified is 1.\n  order Time.utc(2020, 3, 11).to_unix\n\n  # Use :retry to retry the script next time moongoon connects if the script raises.\n  on_error :discard\n\n  def process(db : Mongo::Database)\n    # Dummy code that will add a ban flag for users that are called 'John'.\n    # This code uses the `cryomongo` syntax, but Models could\n    # be used for convenience despite a performance overhead.\n    db[\"users\"].update_many(\n      filter: {name: \"John\"},\n      update: {\"$set\": {\"banned\": true}},\n    )\n  end\nend\n```\n\n### Usage\n\n**Any class that inherits from `Moongoon::Database::Scripts::Base` will be registered as a script.**\n\nScripts are run when calling `Moongoon::Database.connect` and after a successful database connection.\nThey are run a single time and the outcome is be written in the `scripts` collection.\n\nIf multiple instances of the server are started simultaneously they will wait until all the scripts\nare processed before resuming execution.","summary":"<p>Scripts inherit from this class.</p>","class_methods":[{"id":"on_error:Action-class-method","html_id":"on_error:Action-class-method","name":"on_error","doc":"The action to perform on failure.\nSet to *:retry* to run the script again the next time the program starts.","summary":"<p>The action to perform on failure.</p>","abstract":false,"args":[],"args_string":" : Action","source_link":null,"def":{"name":"on_error","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Action","visibility":"Public","body":"@@on_error"}},{"id":"on_error=(on_error:Action)-class-method","html_id":"on_error=(on_error:Action)-class-method","name":"on_error=","doc":"The action to perform on failure.\nSet to *:retry* to run the script again the next time the program starts.","summary":"<p>The action to perform on failure.</p>","abstract":false,"args":[{"name":"on_error","doc":null,"default_value":"","external_name":"on_error","restriction":"Action"}],"args_string":"(on_error : Action)","source_link":null,"def":{"name":"on_error=","args":[{"name":"on_error","doc":null,"default_value":"","external_name":"on_error","restriction":"Action"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@on_error = on_error"}},{"id":"on_success:Action-class-method","html_id":"on_success:Action-class-method","name":"on_success","doc":"The action to perform on success.\nSet to *:retry* to run the script again the next time the program starts.","summary":"<p>The action to perform on success.</p>","abstract":false,"args":[],"args_string":" : Action","source_link":null,"def":{"name":"on_success","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Action","visibility":"Public","body":"@@on_success"}},{"id":"on_success=(on_success:Action)-class-method","html_id":"on_success=(on_success:Action)-class-method","name":"on_success=","doc":"The action to perform on success.\nSet to *:retry* to run the script again the next time the program starts.","summary":"<p>The action to perform on success.</p>","abstract":false,"args":[{"name":"on_success","doc":null,"default_value":"","external_name":"on_success","restriction":"Action"}],"args_string":"(on_success : Action)","source_link":null,"def":{"name":"on_success=","args":[{"name":"on_success","doc":null,"default_value":"","external_name":"on_success","restriction":"Action"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@on_success = on_success"}},{"id":"order:Int64-class-method","html_id":"order:Int64-class-method","name":"order","doc":"The order in which the scripts are run.","summary":"<p>The order in which the scripts are run.</p>","abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"order","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@@order"}},{"id":"order=(order:Int64)-class-method","html_id":"order=(order:Int64)-class-method","name":"order=","doc":"The order in which the scripts are run.","summary":"<p>The order in which the scripts are run.</p>","abstract":false,"args":[{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int64"}],"args_string":"(order : Int64)","source_link":null,"def":{"name":"order=","args":[{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@order = order"}}],"constructors":[],"instance_methods":[{"id":"process(db:Mongo::Database)-instance-method","html_id":"process(db:Mongo::Database)-instance-method","name":"process","doc":"Will be executed once after a successful database connection and\nif it has never been run against the target database before.","summary":"<p>Will be executed once after a successful database connection and if it has never been run against the target database before.</p>","abstract":true,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"Mongo::Database"}],"args_string":"(db : Mongo::Database)","source_link":null,"def":{"name":"process","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"Mongo::Database"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"moongoon/Moongoon/Database/Scripts/Base/Action","path":"Moongoon/Database/Scripts/Base/Action.html","kind":"enum","full_name":"Moongoon::Database::Scripts::Base::Action","name":"Action","abstract":false,"superclass":null,"ancestors":[{"html_id":"moongoon/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"moongoon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"moongoon/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"moongoon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"moongoon","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Discard","name":"Discard","value":"0","doc":null,"summary":null},{"id":"Retry","name":"Retry","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Database/Scripts/Base","kind":"class","full_name":"Moongoon::Database::Scripts::Base","name":"Base"},"doc":"Action to perform when a script fails.","summary":"<p>Action to perform when a script fails.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"discard?-instance-method","html_id":"discard?-instance-method","name":"discard?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"discard?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Discard"}},{"id":"retry?-instance-method","html_id":"retry?-instance-method","name":"retry?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"retry?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Retry"}}],"macros":[],"types":[]}]}]}]},{"html_id":"moongoon/Moongoon/Document","path":"Moongoon/Document.html","kind":"class","full_name":"Moongoon::Document","name":"Document","abstract":true,"superclass":{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"moongoon/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"moongoon/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"moongoon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"moongoon/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"moongoon/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon","kind":"module","full_name":"Moongoon","name":"Moongoon"},"doc":"Base model class.\n\nContains helpers to (de)serialize data to json format and bson format.\n\n```\nclass Models::MyModel < Moongoon::Document\n  property name : String\n  property age : Int32\nend\n```","summary":"<p>Base model class.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../Moongoon/Document.html#new(**args)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":null,"def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(**args)-class-method","html_id":"new(**args)-class-method","name":"new","doc":"Creates a new instance of the class from variadic arguments.\n\n```\nUser.new first_name: \"John\", last_name: \"Doe\"\n```","summary":"<p>Creates a new instance of the class from variadic arguments.</p>","abstract":false,"args":[],"args_string":"(**args)","source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = self.allocate\n{% for ivar in @type.instance_vars %}\n        {% default_value = ivar.default_value %}\n        {% if ivar.type.nilable? %}\n          instance.{{ ivar.id }} = args[\"{{ ivar.id }}\"]? {% if ivar.has_default_value? %}|| {{ default_value }}{% end %}\n        {% else %}\n          if value = args[\"{{ ivar.id }}\"]?\n            instance.{{ ivar.id }} = value\n          {% if ivar.has_default_value? %}\n          else\n            instance.{{ ivar.id }} = {{ default_value }}\n          {% end %}\n          end\n        {% end %}\n      {% end %}\ninstance\n"}}],"instance_methods":[{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"to_tuple-instance-method","html_id":"to_tuple-instance-method","name":"to_tuple","doc":"Instantiate a named tuple from the model instance properties.\n\n```\nuser = User.new first_name: \"John\", last_name: \"Doe\"\npp user.to_tuple\n# => {\n#   first_name: \"John\",\n#   last_name: \"Doe\",\n# }\n```","summary":"<p>Instantiate a named tuple from the model instance properties.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"to_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {\n      {% for ivar in @type.instance_vars %}\n        \"{{ ivar.name }}\": self.{{ ivar.name }},\n      {% end %}\n      }\n      {% end %}"}}],"macros":[],"types":[]},{"html_id":"moongoon/Moongoon/Error","path":"Moongoon/Error.html","kind":"module","full_name":"Moongoon::Error","name":"Error","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon","kind":"module","full_name":"Moongoon","name":"Moongoon"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"moongoon/Moongoon/Error/NotFound","path":"Moongoon/Error/NotFound.html","kind":"class","full_name":"Moongoon::Error::NotFound","name":"NotFound","abstract":false,"superclass":{"html_id":"moongoon/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"moongoon/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"moongoon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"moongoon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"moongoon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"moongoon/Moongoon/Error","kind":"module","full_name":"Moongoon::Error","name":"Error"},"doc":"Raised when a query fails to retrieve documents.","summary":"<p>Raised when a query fails to retrieve documents.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]}}